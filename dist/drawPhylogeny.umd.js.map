{"version":3,"file":"drawPhylogeny.umd.js","sources":["../src/radial/polarToCartesian.js","../src/radial/describeArc.js","../src/utils/preorder.js","../src/utils/fortify.js","../src/radial/radialData.js","../src/radial/radialLayout.js","../src/radial/getRadii.js","../src/radial/getArcs.js","../src/radial/getChildArcs.js","../src/rectangle/getHorizontal.js","../src/utils/mean.js","../src/rectangle/rectangleLayout.js","../src/rectangle/getVertical.js","../src/rectangle/getChildVerticals.js","../src/unrooted/equalAngleLayout.js","../src/utils/numTips.js","../src/unrooted/unrooted.js","../src/utils/edges.js","../src/utils/readTree.js","../src/plot/drawPhylogeny.js"],"sourcesContent":["// src/radial/polarToCartesian.js\nexport default function (cx, cy, r, t) {\n  return { x: cx + r * Math.cos(t), y: cy - r * Math.sin(t) };\n}\n","import polarToCartesian from \"./polarToCartesian.js\";\n\n/**\n * Draw the shortest arc between startAngle and endAngle (radians), CCW.\n * If the CW path is shorter, swap start/end so the CCW path is still shortest.\n * Works with Y-inverted screen coords (polarToCartesian already inverts Y).\n */\nexport default function describeArc(cx, cy, radius, startAngle, endAngle) {\n  const TAU = Math.PI * 2;\n  const norm = (t) => ((t % TAU) + TAU) % TAU;\n  let a0 = norm(startAngle);\n  let a1 = norm(endAngle);\n\n  // CCW and CW spans\n  const ccw = (a1 - a0 + TAU) % TAU;\n  const cw = (a0 - a1 + TAU) % TAU;\n\n  // Ensure we always take the shorter span *in CCW* by swapping if needed\n  if (cw < ccw) {\n    const tmp = a0; a0 = a1; a1 = tmp;\n  }\n\n  const delta = (a1 - a0 + TAU) % TAU;          // now the shorter CCW span\n  if (delta < 1e-9) {\n    const p = polarToCartesian(cx, cy, radius, a0);\n    return `M ${p.x} ${p.y}`;                   // degenerate span → no arc\n  }\n\n  const largeArcFlag = delta > Math.PI ? 1 : 0; // should be 0 for “shortest”, but keep for safety\n  const sweepFlag = 0;                          // CCW\n\n  const p0 = polarToCartesian(cx, cy, radius, a0);\n  const p1 = polarToCartesian(cx, cy, radius, a1);\n\n  return `M ${p0.x} ${p0.y} A ${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${p1.x} ${p1.y}`;\n}\n\n","/**\n * Recursive function for pre-order traversal of tree (returns array)\n */\nexport function preorder(node, list = []) {\n  list.push(node);\n  for (let i = 0; i < (node.children?.length || 0); i++) {\n    list = preorder(node.children[i], list);\n  }\n  return list;\n}\n\n/**\n * Iterative generator traversals (avoid recursion limits on large trees)\n */\nexport function* preorderIter(root) {\n  const stack = [root];\n  while (stack.length) {\n    const n = stack.pop();\n    yield n;\n    if (n.children) for (let i = n.children.length - 1; i >= 0; --i) stack.push(n.children[i]);\n  }\n}\n\nexport function* postorderIter(root) {\n  const stack = [[root, 0]];\n  while (stack.length) {\n    const top = stack[stack.length - 1];\n    const [n, i] = top;\n    if (!n.children || i >= n.children.length) {\n      stack.pop();\n      yield n;\n    } else {\n      top[1] = i + 1;\n      stack.push([n.children[i], 0]);\n    }\n  }\n}\n\n","import { preorder } from \"./preorder.js\"\n\n/**\n * Convert parsed Newick tree from readTree() into data\n * frame.\n * this is akin to a \"phylo\" object in R.\n */\n\nexport default function (tree, sort = true) {\n    var df = [];\n\n    for (const node of preorder(tree)) {\n        if (node.parent === null) {\n            df.push({\n                'parentId': null,\n                'parentLabel': null,\n                'thisId': node.id,\n                'thisLabel': node.label,\n                'children': node.children.map(x => x.id),\n                'branchLength': 0.,\n                'isTip': false,\n                'x': node.x,\n                'y': node.y,\n                'angle': node.angle\n            })\n        }\n        else {\n            df.push({\n                'parentId': node.parent.id,\n                'parentLabel': node.parent.label,\n                'thisId': node.id,\n                'thisLabel': node.label,\n                'children': node.children.map(x => x.id),\n                'branchLength': node.branchLength,\n                'isTip': (node.children.length == 0),\n                'x': node.x,\n                'y': node.y,\n                'angle': node.angle\n            })\n        }\n    }\n\n    if (sort) {\n        df = df.sort(function (a, b) {\n            return a.thisId - b.thisId;\n        })\n    }\n    return (df);\n}\n","import fortify from \"../utils/fortify.js\"\n\n/**\n * Compute per-node polar coordinates for radial layout:\n *  - Tip angles: evenly spaced 0..2π in tip DFS order\n *  - Internal angles: circular mean of child angles\n *  - Radii: cumulative branch length from root\n *  - x,y: cartesian projection\n *\n * Returns the fortified array with added {angle, r, x, y}.\n */\nexport default function radialData(node) {\n  const TAU = Math.PI * 2;\n  const norm = (t) => ((t % TAU) + TAU) % TAU;\n\n  const pd = fortify(node, /*sort*/ true);\n  const byId = new Map(pd.map(d => [d.thisId, d]));\n  const kids = new Map(pd.map(d => [d.thisId, d.children || []]));\n\n  // Find root id\n  let root = null;\n  for (const d of pd) {\n    if (d.parentId == null) { root = d.thisId; break; }\n  }\n\n  // Collect tip ids in DFS left->right order to preserve input ordering\n  const tipIds = [];\n  (function dfs(id) {\n    const c = kids.get(id) || [];\n    if (c.length === 0) {\n      tipIds.push(id);\n      return;\n    }\n    for (const ch of c) dfs(ch);\n  })(root);\n\n  // Assign tip angles evenly spaced 0..2π\n  const N = Math.max(1, tipIds.length);\n  const angle = new Map();\n  tipIds.forEach((id, i) => {\n    angle.set(id, (i / N) * TAU);\n  });\n\n  // Internal node angles: circular mean of child angles (post-order)\n  (function setInternalAngles(id) {\n    const c = kids.get(id) || [];\n    for (const ch of c) setInternalAngles(ch);\n    if (c.length > 0) {\n      let sx = 0, sy = 0;\n      for (const ch of c) {\n        const th = angle.get(ch);\n        sx += Math.cos(th);\n        sy += Math.sin(th);\n      }\n      angle.set(id, norm(Math.atan2(sy, sx)));\n    }\n  })(root);\n\n  // Radii: cumulative branch lengths from root (root r=0)\n  const radius = new Map();\n  radius.set(root, 0);\n  (function setR(id) {\n    const c = kids.get(id) || [];\n    const r0 = radius.get(id) || 0;\n    for (const ch of c) {\n      const child = byId.get(ch);\n      const bl = child?.branchLength ?? 0;\n      radius.set(ch, r0 + bl);\n      setR(ch);\n    }\n  })(root);\n\n  // Enrich pd rows with angle, r, x, y\n  for (const d of pd) {\n    const th = angle.get(d.thisId) ?? 0;\n    const r  = radius.get(d.thisId) ?? 0;\n    d.angle = th;\n    d.r = r;\n    d.x = r * Math.cos(th);\n    d.y = r * Math.sin(th);\n  }\n\n  return pd;\n}\n","import radialData from \"./radialData.js\"\nimport getRadii from \"./getRadii.js\"\nimport getArcs from \"./getArcs.js\"\nimport getChildArcs from \"./getChildArcs.js\"\n\n/**\n * Simple wrapper for radial layout:\n *  - data: per-node { angle, r, x, y, ... }\n *  - radii: per-edge radial spokes (parent.r → child.r)\n *  - arcs: per-parent arcs spanning all children at parent's radius\n *  - child_arcs: per-child half-arcs (parent.angle → child.angle) at parent's radius\n */\nexport default function radialLayout(node) {\n  const data = {};\n  data.data = radialData(node);\n  data.radii = getRadii(node);\n  data.arcs = getArcs(data.data);\n  data.child_arcs = getChildArcs(data.data);\n  return data;\n}\n\n","import radialData from \"./radialData.js\";\n\n/**\n * Per-edge radial segments (for highlighting and drawing).\n * For each non-root node, draw a radial line from the parent radius to the child radius\n * at the CHILD'S angle.\n *\n * Output: [{ parentId, childId, x0, y0, x1, y1, isTip }]\n */\nexport default function getRadii(node) {\n  const data = radialData(node);\n  const byId = new Map(data.map(d => [d.thisId, d]));\n  const root = data.find(d => d.parentId == null)?.thisId;\n\n  const segments = [];\n  for (const d of data) {\n    if (d.thisId === root) continue;\n    const parent = byId.get(d.parentId);\n    if (!parent) continue;\n\n    const theta = d.angle;\n    const r0 = parent.r;\n    const r1 = d.r;\n\n    segments.push({\n      parentId: parent.thisId,\n      childId: d.thisId,\n      x0: r0 * Math.cos(theta),\n      y0: r0 * Math.sin(theta),\n      x1: r1 * Math.cos(theta),\n      y1: r1 * Math.sin(theta),\n      isTip: !!d.isTip\n    });\n  }\n  return segments;\n}\n\n","/**\n * Build arc descriptors for each internal parent:\n *  - One arc per internal node at radius = parent.r\n *  - Start/end angles choose the *shortest* wrap-aware span covering the children\n *  - Skips degenerate spans (delta ~ 0)\n */\nexport default function getArcs(pd) {\n  const TAU = Math.PI * 2;\n  const norm = (t) => ((t % TAU) + TAU) % TAU;\n  const EPS = 1e-6;\n\n  // Quick lookups\n  const byId = new Map(pd.map(d => [d.thisId, d]));\n  const childrenByParent = new Map();\n  let root = null;\n\n  for (const d of pd) {\n    if (d.parentId == null) root = d.thisId;\n    if (!childrenByParent.has(d.parentId)) childrenByParent.set(d.parentId, []);\n    childrenByParent.get(d.parentId).push(d);\n  }\n\n  const arcs = [];\n\n  for (const parent of pd) {\n    const pid = parent.thisId;\n    if (pid === root) continue; // no arc above root\n    const kids = childrenByParent.get(pid) || [];\n    if (kids.length < 2) continue; // need at least two children\n\n    // Collect & sort child angles\n    const A = kids.map(k => norm(k.angle)).sort((a, b) => a - b);\n    const aMin = A[0], aMax = A[A.length - 1];\n\n    // Two candidate spans: direct (aMin -> aMax) and wrapped (aMax -> aMin across 2π)\n    const direct = aMax - aMin;\n    const wrapped = TAU - direct;\n\n    // Choose the shorter span. We'll draw **CCW** (sweepFlag = 0) in describeArc.\n    let start, end, span;\n    if (direct <= wrapped) {\n      start = aMin;\n      end = aMax;\n      span = direct;\n    } else {\n      // wrapped is shorter: go CCW from aMax up through 2π to aMin\n      start = aMax;\n      end = aMin;\n      span = wrapped;\n    }\n\n    if (span < EPS || !isFinite(parent.r) || parent.r <= 0) continue;\n\n    arcs.push({\n      start,\n      end,\n      radius: parent.r,\n      thisId: pid,\n      parentId: parent.parentId\n    });\n  }\n\n  return arcs;\n}\n\n","/**\n * Per-child \"half\" arcs for radial trees.\n *\n * For each non-root node (child), emit an arc at the PARENT's radius that\n * spans between the parent's angle and the child's angle. This is the arc\n * segment that meets the child's spoke and is ideal for root→tip highlighting.\n *\n * Input:  pd — the array returned by radialData(node) (each row has .thisId, .parentId, .angle, .r)\n * Output: [{ parentId, childId, radius, start, end }]\n */\nexport default function getChildArcs(pd) {\n  const byId = new Map(pd.map(d => [d.thisId, d]));\n  const arcs = [];\n\n  for (const child of pd) {\n    if (child.parentId == null) continue; // skip root\n    const parent = byId.get(child.parentId);\n    if (!parent) continue;\n\n    arcs.push({\n      parentId: parent.thisId,\n      childId: child.thisId,\n      radius: parent.r,        // draw on the parent's circle\n      start: parent.angle,     // start at parent's angle\n      end: child.angle         // end at child's angle (describeArc will choose the shortest CCW span)\n    });\n  }\n\n  return arcs;\n}\n\n","import mean from \"../utils/mean.js\"\nimport fortify from \"../utils/fortify.js\"\n\n/**\n * Rectangle layout: compute per-node x0,x1 and y0=y1\n * - Tip y is assigned by input order (preserves ladderize/order)\n * - Internal node y is mean of child y's\n * - x1 accumulates branch lengths from root\n */\n\nexport default function getHorizontal(node) {\n  const pd = fortify(node);\n\n  // Fast lookup from id -> pd index\n  const idIndex = new Map(pd.map((d, i) => [d.thisId, i]));\n\n  // 1) Leaf order from the INPUT TREE (respects your child order / ladderize)\n  const leafIds = [];\n  (function dfs(n) {\n    if (!n.children || n.children.length === 0) { leafIds.push(n.id); return; }\n    n.children.forEach(dfs);\n  })(node);\n\n  // Map each leaf id to a vertical slot (1..N)\n  const tipSlot = new Map(leafIds.map((id, i) => [id, i + 1]));\n\n  // 2) Set Y for tips directly from that order; internal node Y via children mean\n  (function setY(n) {\n    const i = idIndex.get(n.id);\n    if (!n.children || n.children.length === 0) {\n      const y = tipSlot.get(n.id);\n      pd[i].y0 = y; pd[i].y1 = y;\n      return y;\n    }\n    const ys = n.children.map(setY);\n    const y = mean(ys);\n    pd[i].y0 = y; pd[i].y1 = y;\n    return y;\n  })(node);\n\n  // 3) Set X by accumulating branch lengths down the tree\n  (function setX(n, xParent) {\n    const i = idIndex.get(n.id);\n    const bl = pd[i].branchLength ?? 0;\n    const x0 = xParent ?? 0;\n    const x1 = x0 + bl;\n    pd[i].x0 = x0; pd[i].x1 = x1;\n    if (n.children && n.children.length) n.children.forEach(c => setX(c, x1));\n  })(node, 0);\n\n  // Clean up: remove fields not needed downstream without triggering no-unused-vars\n  return pd.map((row) => {\n    const { y: _y, x: _x, angle: _angle, ...item } = row;\n    return item;\n  });\n}\n\n","/**\n * Iterable mean\n * Poached from https://github.com/d3/d3-array/blob/master/src/mean.js\n * (Other array means buggered up the tree)\n */\n\nexport default function (values, valueof) {\n    let count = 0;\n    let sum = 0;\n    if (valueof === undefined) {\n        for (let value of values) {\n            if (value != null && (value = +value) >= value) {\n                ++count, sum += value;\n            }\n        }\n    } else {\n        let index = -1;\n        for (let value of values) {\n            if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n                ++count, sum += value;\n            }\n        }\n    }\n    if (count) return sum / count;\n}\n","import getHorizontal from \"./getHorizontal.js\"\nimport getVertical from \"./getVertical.js\"\nimport getChildVerticals from \"./getChildVerticals.js\"\n\n/**\n * Rectangle layout wrapper.\n * Returns:\n *  - data: per-node rows (x0,x1,y0=y1,...)\n *  - vertical_lines: single spanning vertical per parent (baseline draw)\n *  - child_vertical_lines: one vertical per edge (for highlighting)\n *  - horizontal_lines: per-edge child horizontals (x0->x1 at y), with labels & tip flags\n */\nexport default function rectangleLayout(node) {\n  const data = getHorizontal(node);              // per-node\n  const vertical_lines = getVertical(node);      // parent spans\n  const child_vertical_lines = getChildVerticals(node); // per-edge verticals\n\n  // IMPORTANT: include y0 & y1, and carry isTip/labels for the renderer\n  const byId = new Map(data.map(d => [d.thisId, d]));\n  const horizontal_lines = data\n    .filter(d => d.parentId != null)\n    .map(d => ({\n      parentId: d.parentId,\n      childId: d.thisId,\n      thisId: d.thisId,\n      thisLabel: d.thisLabel,\n      isTip: d.isTip,\n      x0: d.x0,\n      x1: d.x1,\n      y0: d.y0,\n      y1: d.y0\n    }));\n\n  return { data, vertical_lines, child_vertical_lines, horizontal_lines };\n}\n\n","import getHorizontal from \"./getHorizontal.js\"\n\nexport default function getVertical(node) {\n  const data = getHorizontal(node);\n\n  // Group rows by parentId (children that share a parent)\n  const byParent = new Map();\n  for (const row of data) {\n    if (row.parentId == null) continue;\n    const a = byParent.get(row.parentId);\n    if (a) a.push(row); else byParent.set(row.parentId, [row]);\n  }\n\n  const verticals = [];\n  for (const [parentId, kids] of byParent.entries()) {\n    if (!kids.length) continue;\n    // Works for binary and multifurcations:\n    const yvals = kids.map(d => d.y0);\n    const y0 = Math.min(...yvals);\n    const y1 = Math.max(...yvals);\n    // All children share the same junction x (their x0)\n    const x = kids[0].x0;\n\n    verticals.push({\n      parentId,\n      x0: x,\n      x1: x,\n      y0,\n      y1,\n      heights: y1 - y0\n    });\n  }\n\n  return verticals;\n}\n\n","import getHorizontal from \"./getHorizontal.js\";\n\n/**\n * Build per-child vertical segments for a rectangular tree:\n * For each non-root node (child), draw a vertical from (parent.x, child.y) to (parent.x, parent.y).\n * This yields exactly one vertical per edge (child->parent), making highlighting trivial.\n *\n * Returns an array of:\n *   {\n *     parentId: number,\n *     childId: number,\n *     x: number,         // x of the parent junction\n *     y0: number,        // min(child.y, parent.y)\n *     y1: number,        // max(child.y, parent.y)\n *   }\n */\nexport default function getChildVerticals(node) {\n  const data = getHorizontal(node); // has parentId, thisId, x0,x1,y0=y1\n\n  // Build a quick index to access parent's y by id\n  const byId = new Map(data.map(d => [d.thisId, d]));\n\n  const childVerticals = [];\n\n  for (const d of data) {\n    if (d.parentId == null) continue;\n    const parent = byId.get(d.parentId);\n    if (!parent) continue;\n\n    const x = d.x0;            // child’s vertical sits at parent.x == child.x0\n    const yc = d.y0;           // child y\n    const yp = parent.y0;      // parent y\n    const y0 = Math.min(yc, yp);\n    const y1 = Math.max(yc, yp);\n\n    childVerticals.push({\n      parentId: d.parentId,\n      childId: d.thisId,\n      x,\n      y0,\n      y1\n    });\n  }\n\n  return childVerticals;\n}\n\n","import numTips from \"../utils/numTips.js\"\n\n/**\n * Equal-angle layout for unrooted trees.\n * - Precomputes ntips in O(n) to avoid repeated subtree counts\n * - Uses angles in \"π units\" (0..2) to match existing API\n * - Populates x,y positions from branchLength and angle\n */\n\nfunction annotateTipCounts(root) {\n  (function post(n) {\n    if (!n.children || n.children.length === 0) {\n      n.ntips = 1; return 1;\n    }\n    let sum = 0;\n    for (const c of n.children) sum += post(c);\n    n.ntips = sum;\n    return sum;\n  })(root);\n  return root;\n}\n\nfunction equalAngleLayout(node) {\n  if (node.parent === null) {\n    annotateTipCounts(node);\n    node.start = 0.;     // guarantees no arcs overlap 0\n    node.end = 2.;       // *π\n    node.angle = 0.;     // irrelevant at root\n    node.ntips = numTips(node); // safe (already computed), left for compatibility\n    node.x = 0;\n    node.y = 0;\n  }\n\n  let lastStart = node.start;\n\n  for (let i = 0; i < node.children.length; i++) {\n    const child = node.children[i];\n    const arc = (node.end - node.start) * (child.ntips / node.ntips);\n\n    child.start = lastStart;\n    child.end = lastStart + arc;\n\n    // bisect the arc in π-units\n    child.angle = child.start + (child.end - child.start) / 2.;\n    lastStart = child.end;\n\n    // map to coordinates (convert π-units to radians by multiplying by Math.PI)\n    const theta = child.angle * Math.PI;\n    const bl = (child.branchLength ?? 0);\n    child.x = node.x + bl * Math.sin(theta);\n    child.y = node.y + bl * Math.cos(theta);\n\n    equalAngleLayout(child);\n  }\n\n  return node;\n}\n\nexport default equalAngleLayout\n\n","/**\n * Recursive function for breadth-first search of a tree\n * the root node is visited first.\n */\n\nfunction levelorder(root) {\n  const queue = [root], result = [];\n  while (queue.length) {\n    const curnode = queue.shift();         // <- FIFO\n    result.push(curnode);\n    for (const child of curnode.children) queue.push(child);\n  }\n  return result;\n}\n\n\n/**\n * Count the number of tips that descend from this node\n */\n\nexport default function(thisnode) {\n  var result = 0;\n  for (const node of levelorder(thisnode)) {\n    if (node.children.length == 0) result++;\n  }\n  return (result);\n}\n","import edges from \"../utils/edges.js\";\nimport fortify from \"../utils/fortify.js\";\nimport equalAngleLayout from \"./equalAngleLayout.js\";\n\n/**\n * Simple wrapper function for equalAngleLayout()\n */\n\nexport default function (node) {\n  var data = {};\n  // use the Felsenstein equal angle layout algorithm\n  var eq = fortify(equalAngleLayout(node));\n  data.data = eq;\n  // make the edges dataset\n  data.edges = edges(eq);\n\n  return data;\n}\n","/**\n * Convert parsed Newick tree from fortify() into data frame of edges\n * this is akin to a \"phylo\" object in R, where thisID and parentId\n * are the $edge slot. I think.\n */\n\nexport default function edges(df, rectangular = false) {\n  const rows = [...df].sort((a, b) => a.thisId - b.thisId);\n  const byId = new Map(rows.map((r) => [r.thisId, r]));\n  const result = [];\n\n  for (const row of rows) {\n    if (row.parentId == null) continue;\n    const parent = byId.get(row.parentId);\n    if (!parent) continue;\n\n    if (rectangular) {\n      result.push({ x1: row.x, y1: row.y, id1: row.thisId, x2: parent.x, y2: row.y, id2: undefined });\n      result.push({ x1: parent.x, y1: row.y, id1: undefined, x2: parent.x, y2: parent.y, id2: row.parentId });\n    } else {\n      result.push({ x1: row.x, y1: row.y, id1: row.thisId, x2: parent.x, y2: parent.y, id2: row.parentId });\n    }\n  }\n  return result;\n}\n\n","/**\n * Parse a Newick tree string into a doubly-linked list of JS Objects.\n * Assigns labels, branch lengths, and node IDs (tips before internals if input emits them that way).\n *\n * Notes / limitations:\n * - Quoted labels and NHX annotations are not fully supported.\n * - Branch lengths in scientific notation are supported (parseFloat).\n */\n\nexport default function readTree(text) {\n  // Remove all whitespace (space, tabs, newlines)\n  text = String(text).replace(/\\s+/g, '');\n\n  const tokens = text.split(/(;|\\(|\\)|,)/);\n  const root = { parent: null, children: [] };\n  let curnode = root;\n  let nodeId = 0;\n\n  for (const token of tokens) {\n    if (!token || token === ';') continue;\n\n    if (token === '(') {\n      const child = { parent: curnode, children: [] };\n      curnode.children.push(child);\n      curnode = child; // descend\n    } else if (token === ',') {\n      // back to parent, then create sibling\n      curnode = curnode.parent;\n      const child = { parent: curnode, children: [] };\n      curnode.children.push(child);\n      curnode = child;\n    } else if (token === ')') {\n      // ascend one level\n      curnode = curnode.parent;\n      if (curnode === null) break;\n    } else {\n      // label/branch-length chunk (e.g., \"A:0.01\" or \"A\")\n      const nodeinfo = token.split(':');\n      if (nodeinfo.length === 1) {\n        if (token.startsWith(':')) {\n          curnode.label = '';\n          curnode.branchLength = parseFloat(nodeinfo[0]);\n        } else {\n          curnode.label = nodeinfo[0];\n          curnode.branchLength = null;\n        }\n      } else if (nodeinfo.length === 2) {\n        curnode.label = nodeinfo[0];\n        curnode.branchLength = parseFloat(nodeinfo[1]);\n      } else {\n        console.warn(token, \"Unhandled token with multiple ':' characters\");\n        curnode.label = nodeinfo[0] || '';\n        curnode.branchLength = parseFloat(nodeinfo[nodeinfo.length - 1]);\n      }\n      curnode.id = nodeId++; // assign then increment\n    }\n  }\n\n  // Ensure root has an id if not assigned during parsing\n  if (root.id == null) root.id = nodeId;\n\n  return root;\n}\n\n","import * as d3 from \"d3\";\nimport * as lw from \"../index.js\";\n\nexport default function drawPhylogeny(\n  treeText,\n  {\n    layout = \"rect\", // rect/radial/unrooted\n    width = 800,\n    height = 800,\n    margin = { top: 20, right: 300, bottom: 20, left: 50 },\n    radialMargin = 80,\n    strokeWidth = 1, // for the phylogeny branches\n    radialMode = \"outer\", // \"outer\" (co-circular tips) or \"phylo\" (true terminals)\n    tipLabels = true,\n    showTooltips = true,\n    tooltipFormatter = (d, rtt) =>\n      `${d.thisLabel ?? \"(unnamed)\"}\\nroot→tip: ${(+rtt).toFixed(4)}`,\n    hoverStroke = \"#1f77b4\",\n    hoverWidth = 3,\n    highlightTips = [], // array of tip labels or ids for static highlight (optional)\n    highlightStroke = \"#e63946\",\n    highlightWidth = 2.5\n  } = {}\n) {\n\n  // shared helpers\n  const isNumber = (x) => typeof x === \"number\" && Number.isFinite(x);\n  // Works for both radial (uses `r`) and rect (uses `x1`).\n  // Falls back to summing branchLength up to the root if neither is present.\n  function makeRootToTipGetter(byId, { prefer = \"auto\" } = {}) {\n    return function rootToTip(tipId) {\n      let n = byId.get(tipId);\n      if (!n) return 0;\n\n      // Prefer explicit cumulative fields if present\n      if (prefer === \"r\" || (prefer === \"auto\" && \"r\" in n)) {\n        return Number(n.r ?? 0);\n      }\n      if (prefer === \"x1\" || (prefer === \"auto\" && \"x1\" in n)) {\n        return Number(n.x1 ?? 0);\n      }\n\n      // Fallback: sum branchLength up the ancestry\n      let sum = 0;\n      while (n && n.parentId != null) {\n        sum += Number(n.branchLength || 0); // null/undefined → 0\n        n = byId.get(n.parentId);\n      }\n      return sum;\n    };\n  }\n\n\n  if (layout === \"rect\") {\n    // RECTANGULAR LAYOUT\n    const tree_df = lw.rectangleLayout(lw.readTree(treeText));\n    const horizontal = tree_df.horizontal_lines;\n    const vertical = tree_df.vertical_lines;\n    const tips = horizontal.filter((d) => d.isTip);\n\n    // indices & root→tip getter\n    const byId = new Map(horizontal.map((d) => [d.thisId, d]));\n    const tipById = new Map(tips.map((d) => [d.thisId, d]));\n    const tipByLabel = new Map(tips.map((d) => [d.thisLabel, d]));\n    const rootToTip = makeRootToTipGetter(byId, { prefer: \"x1\" }); \n\n    const maxY = d3.max(horizontal, (d) => d.y1);\n    const minY = d3.min(horizontal, (d) => d.y1);\n    const maxX = d3.max(horizontal, (d) => d.x1);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([minY - 1, maxY + 1])\n      .range([margin.top, height - margin.bottom]);\n\n    const xScale = d3\n      .scaleLinear()\n      .domain([0, maxX])\n      .range([margin.left, width - margin.right]);\n\n    const svg = d3\n      .create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"font-size\", 10);\n\n    const group = svg.append(\"g\");\n\n    // layers for highlight/hover\n    const staticLayer = svg.append(\"g\").attr(\"class\", \"phylo_static_highlight\");\n    const hoverLayer = svg.append(\"g\").attr(\"class\", \"phylo_hover_highlight\");\n\n    group\n      .selectAll(\".hline\")\n      .data(horizontal)\n      .join(\"line\")\n      .attr(\"x1\", (d) => xScale(d.x0))\n      .attr(\"y1\", (d) => yScale(d.y0))\n      .attr(\"x2\", (d) => xScale(d.x1))\n      .attr(\"y2\", (d) => yScale(d.y1))\n      .attr(\"stroke\", \"#555\")\n      .attr(\"stroke-width\", strokeWidth);\n\n    group\n      .selectAll(\".vline\")\n      .data(vertical)\n      .join(\"line\")\n      .attr(\"x1\", (d) => xScale(d.x0))\n      .attr(\"y1\", (d) => yScale(d.y0))\n      .attr(\"x2\", (d) => xScale(d.x1))\n      .attr(\"y2\", (d) => yScale(d.y1))\n      .attr(\"stroke\", \"#555\")\n      .attr(\"stroke-width\", strokeWidth);\n\n    // tip dots\n    const tipDots = group\n      .selectAll(\".tip-dot\")\n      .data(tips)\n      .join(\"circle\")\n      .attr(\"cx\", (d) => xScale(d.x1))\n      .attr(\"cy\", (d) => yScale(d.y1))\n      .attr(\"r\", 2)\n      .attr(\"fill\", \"black\");\n\n    // tooltips for rect dots\n    if (showTooltips) {\n      tipDots\n        .append(\"title\")\n        .text((d) => tooltipFormatter(d, rootToTip(d.thisId)));\n    }\n\n    // interactive root→tip highlight (rect) on dot hover\n    tipDots\n      .on(\"mouseenter\", function(_event, d) {\n        drawRectPath(d.thisId, hoverLayer, hoverStroke, hoverWidth);\n        d3.select(this).attr(\"r\", 4);\n      })\n      .on(\"mouseleave\", function() {\n        hoverLayer.selectAll(\"*\").remove();\n        d3.select(this).attr(\"r\", 2);\n      });\n\n    // labels\n    if (tipLabels) {\n      const labels = svg\n        .append(\"g\")\n        .attr(\"class\", \"phylo_labels\")\n        .selectAll(\"text\")\n        .data(tips)\n        .join(\"text\")\n        .attr(\"x\", (d) => xScale(d.x1) + 4)\n        .attr(\"y\", (d) => yScale(d.y1))\n        .attr(\"dy\", \"0.32em\")\n        .attr(\"font-size\", 10)\n        .text((d) => d.thisLabel?.replace(/_/g, \" \") ?? \"\");\n\n      if (showTooltips) {\n        labels\n          .append(\"title\")\n          .text((d) => tooltipFormatter(d, rootToTip(d.thisId)));\n      }\n\n      labels\n        .on(\"mouseenter\", function(_event, d) {\n          drawRectPath(d.thisId, hoverLayer, hoverStroke, hoverWidth);\n          d3.select(this).attr(\"font-weight\", 600);\n        })\n        .on(\"mouseleave\", function() {\n          hoverLayer.selectAll(\"*\").remove();\n          d3.select(this).attr(\"font-weight\", null);\n        });\n    }\n\n    // static highlight by ids/labels\n    if (highlightTips && highlightTips.length) {\n      const chosen = new Set(\n        [\n          ...highlightTips.filter(isNumber).map((id) => tipById.get(id)),\n          ...highlightTips\n            .filter((x) => !isNumber(x))\n            .map((lb) => tipByLabel.get(lb))\n        ].filter(Boolean)\n      );\n      chosen.forEach((tip) => {\n        drawRectPath(tip.thisId, staticLayer, highlightStroke, highlightWidth);\n      });\n    }\n\n    // helper to draw root→tip for rect (both vertical+horizontal)\n    function drawRectPath(tipId, layer, stroke, width) {\n      layer.selectAll(\"*\").remove();\n      let cur = byId.get(tipId);\n      while (cur && cur.parentId != null) {\n        const parent = byId.get(cur.parentId);\n        if (!parent) break;\n\n        // vertical at junction x0 from parent.y to child.y\n        layer\n          .append(\"line\")\n          .attr(\"x1\", xScale(cur.x0))\n          .attr(\"x2\", xScale(cur.x0))\n          .attr(\"y1\", yScale(parent.y0))\n          .attr(\"y2\", yScale(cur.y0))\n          .attr(\"stroke\", stroke)\n          .attr(\"stroke-width\", width)\n          .attr(\"stroke-linecap\", \"round\");\n\n        // horizontal along child's y, from junction x0 to x1\n        layer\n          .append(\"line\")\n          .attr(\"x1\", xScale(cur.x0))\n          .attr(\"x2\", xScale(cur.x1))\n          .attr(\"y1\", yScale(cur.y0))\n          .attr(\"y2\", yScale(cur.y1))\n          .attr(\"stroke\", stroke)\n          .attr(\"stroke-width\", width)\n          .attr(\"stroke-linecap\", \"round\");\n\n        cur = parent;\n      }\n    }\n\n    return svg.node();\n  } else if (layout === \"radial\") {\n    // RADIAL LAYOUT\n    if (width !== height) {\n      new Error(\"width and height must be the same for radial layout\");\n    }\n    const parsedTree = lw.readTree(treeText);\n    const rad = lw.radialLayout(parsedTree);\n\n    // ===== MODE =====\n    const TIP_MODE = radialMode; // \"phylo\" (shorten to original tips) or \"outer\" (project to one circle)\n    const isOuter = TIP_MODE === \"outer\";\n    if (TIP_MODE != \"phylo\" || TIP_MODE != \"outer\") {\n      new Error(\"radialMode must be either 'phylo' or 'outer'\");\n    }\n\n    // visuals (0 = let spokes reach the dots)\n    const DOT_R = 3;\n    const END_CAP = 0;\n\n    // ===== SCALES / BOUNDS =====\n    const maxRadius = d3.max(rad.data, (d) => d.r) ?? 0;\n    const scaleRadial = maxRadius + 2 * radialMargin;\n    const w = width,\n      h = height;\n    const centerX = w / 2,\n      centerY = h / 2;\n\n    const xScaleRadial = d3\n      .scaleLinear()\n      .domain([-scaleRadial, scaleRadial])\n      .range([0, w]);\n    const yScaleRadial = d3\n      .scaleLinear()\n      .domain([-scaleRadial, scaleRadial])\n      .range([h, 0]);\n    const radiusPx = (r) => r * (w / (2 * scaleRadial));\n\n    // ===== INDEXES / HELPERS =====\n    const byId = new Map(rad.data.map((d) => [d.thisId, d]));\n    const tips = rad.data.filter((d) => d.isTip);\n    const tipMaxR = tips.length ? d3.max(tips, (d) => d.r) : 0;\n    const rootToTip = makeRootToTipGetter(byId, { prefer: \"r\" });\n    const tipById = new Map(tips.map((d) => [d.thisId, d])); // HILITE:\n    const tipByLabel = new Map(tips.map((d) => [d.thisLabel, d])); // HILITE:\n\n    // Robust child-id extractor (handles multiple shapes)\n    function childIdOf(spoke) {\n      // prefer explicit child id fields; fall back to thisId; last-ditch id1 (seen in some edge shapes)\n      return spoke.childId ?? spoke.thisId ?? spoke.id1 ?? null;\n    }\n\n    // Shorten the *screen-space* end of a spoke by END_CAP px\n    function shortenSpokePx(x0, y0, x1, y1) {\n      const X0 = xScaleRadial(x0),\n        Y0 = yScaleRadial(y0);\n      const X1 = xScaleRadial(x1),\n        Y1 = yScaleRadial(y1);\n      const dx = X1 - X0,\n        dy = Y1 - Y0;\n      const len = Math.hypot(dx, dy) || 1;\n      const t = Math.max(0, (len - END_CAP) / len);\n      return { X0, Y0, X1s: X0 + dx * t, Y1s: Y0 + dy * t, len };\n    }\n\n    // ===== SVG ROOT =====\n    const svg = d3\n      .create(\"svg\")\n      .attr(\"width\", w)\n      .attr(\"height\", h)\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"font-size\", 10);\n\n    const group = svg.append(\"g\");\n\n    // overlay groups (drawn on top)\n    const staticLines = svg.append(\"g\").attr(\"class\", \"phylo_static_lines\"); // HILITE:\n    const staticArcs = svg.append(\"g\").attr(\"class\", \"phylo_static_arcs\"); // HILITE:\n    const hoverLines = svg.append(\"g\").attr(\"class\", \"phylo_hover_lines\"); // HILITE:\n    const hoverArcs = svg.append(\"g\").attr(\"class\", \"phylo_hover_arcs\"); // HILITE:\n\n    // ===== ARCS (parent circles) =====\n    group\n      .append(\"g\")\n      .attr(\"class\", \"phylo_arcs\")\n      .selectAll(\"path\")\n      .data(rad.arcs)\n      .join(\"path\")\n      .attr(\"d\", (d) =>\n        lw.describeArc(\n          centerX,\n          centerY,\n          Math.max(0, radiusPx(d.radius)),\n          d.start,\n          d.end\n        )\n      )\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#777\")\n      .attr(\"stroke-width\", strokeWidth);\n\n    // ===== RADII (spokes) =====\n    group\n      .append(\"g\")\n      .attr(\"class\", \"phylo_radii\")\n      .selectAll(\"line\")\n      .data(rad.radii)\n      .join(\"line\")\n      .each(function(s, _i) {\n        // parent end (data space)\n        const x0 = s.x0,\n          y0 = s.y0;\n\n        // child end (data space), shape-agnostic\n        const cid = childIdOf(s);\n        const node = cid != null ? byId.get(cid) : undefined;\n        const isTipSpoke = !!(node && node.isTip);\n\n        // default to the original child endpoint from the spoke record\n        let x1 = s.x1,\n          y1 = s.y1;\n\n        // In \"outer\" mode, project only *tip* spokes to the common circle\n        if (isOuter && isTipSpoke) {\n          x1 = tipMaxR * Math.cos(node.angle);\n          y1 = tipMaxR * Math.sin(node.angle);\n        }\n\n        // Shorten in screen space so the spoke doesn’t pierce the dot (END_CAP can be 0)\n        const { X0, Y0, X1s, Y1s, _len } = shortenSpokePx(x0, y0, x1, y1);\n\n        d3.select(this)\n          .attr(\"x1\", X0)\n          .attr(\"y1\", Y0)\n          .attr(\"x2\", X1s)\n          .attr(\"y2\", Y1s)\n          .attr(\"stroke\", \"#777\")\n          .attr(\"stroke-width\", strokeWidth);\n      });\n\n    // ===== TIP DOTS =====\n    const tipDots = group\n      .append(\"g\")\n      .attr(\"class\", \"phylo_tip_dots\")\n      .selectAll(\"circle\")\n      .data(tips)\n      .join(\"circle\")\n      .each(function(d, _i) {\n        // dot at original tip (align) or projected circle (outer)\n        const x = isOuter ? tipMaxR * Math.cos(d.angle) : d.x;\n        const y = isOuter ? tipMaxR * Math.sin(d.angle) : d.y;\n\n        d3.select(this)\n          .attr(\"cx\", xScaleRadial(x))\n          .attr(\"cy\", yScaleRadial(y))\n          .attr(\"r\", DOT_R)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 1.5);\n      });\n\n    if (showTooltips) {\n      tipDots\n        .append(\"title\")\n        .text((d) => tooltipFormatter(d, rootToTip(d.thisId)));\n    }\n\n    // maps for fast lookup on hover (childId → spoke / arc)\n    const spokeByChild = new Map(rad.radii.map((s) => [childIdOf(s), s]));\n    const arcByChild = new Map(rad.child_arcs.map((a) => [a.childId, a]));\n\n    // ===== LABELS =====\n    // Labels — make them follow the tip position used by the current mode\n    if (tipLabels) {\n      const labels = group\n        .append(\"g\")\n        .attr(\"class\", \"phylo_labels\")\n        .selectAll(\"g.label\")\n        .data(tips)\n        .join(\"g\")\n        .attr(\"class\", \"label\")\n        .attr(\"transform\", (d) => {\n          // same tip position rule as dots/spokes:\n          //  - \"outer\": snap to common ring (tipMaxR)\n          //  - otherwise (e.g. \"align\"/\"phylo\"): true tip radius\n          const r = isOuter ? tipMaxR : d.r;\n          const x = r * Math.cos(d.angle);\n          const y = r * Math.sin(d.angle);\n          return `translate(${xScaleRadial(x)},${yScaleRadial(y)})`;\n        })\n        .each(function(d) {\n          // rotate so text reads outward; flip when on the left side\n          let angle = (-d.angle * 180) / Math.PI;\n          let xoff = 10; // radial padding for text (px)\n          let anchor = \"start\";\n          if (d.angle > Math.PI / 2 && d.angle < (3 * Math.PI) / 2) {\n            angle += 180;\n            xoff *= -1;\n            anchor = \"end\";\n          }\n          d3.select(this)\n            .append(\"g\")\n            .attr(\"transform\", `rotate(${angle})`)\n            .append(\"text\")\n            .attr(\"x\", xoff)\n            .attr(\"alignment-baseline\", \"middle\")\n            .attr(\"text-anchor\", anchor)\n            .attr(\"font-size\", 10)\n            .attr(\"fill\", \"black\")\n            .text((d) => d.thisLabel?.replace(/_/g, \" \") ?? \"\");\n        });\n\n      if (showTooltips) {\n        labels\n          .append(\"title\")\n          .text((d) => tooltipFormatter(d, rootToTip(d.thisId)));\n      }\n\n      // label hover\n      labels\n        .on(\"mouseenter\", function(event, d) {\n          drawRadialPath(d, hoverLines, hoverArcs, hoverStroke, hoverWidth);\n          d3.select(this).select(\"text\").attr(\"font-weight\", 600);\n        })\n        .on(\"mouseleave\", function() {\n          hoverLines.selectAll(\"*\").remove();\n          hoverArcs.selectAll(\"*\").remove();\n          d3.select(this).select(\"text\").attr(\"font-weight\", null);\n        });\n    }\n\n    // draw (overlay) the root→tip path: spokes + arcs (half-arc per child)\n    function drawRadialPath(\n      target,\n      lineLayer,\n      arcLayer,\n      stroke = \"#1f77b4\",\n      width = 3\n    ) {\n      // target may be a tip node *or* a numeric tip id\n      lineLayer.selectAll(\"*\").remove();\n      arcLayer.selectAll(\"*\").remove();\n\n      let cur = typeof target === \"number\" ? byId.get(target) : target;\n      if (!cur) return;\n\n      let first = true;\n      while (cur && cur.parentId != null) {\n        // ----- spoke (parent → child) -----\n        const s = spokeByChild.get(cur.thisId);\n        if (s) {\n          const px = s.x0,\n            py = s.y0;\n          let cx = s.x1,\n            cy = s.y1;\n          if (isOuter && first && cur.isTip) {\n            const r = tipMaxR;\n            cx = r * Math.cos(cur.angle);\n            cy = r * Math.sin(cur.angle);\n          }\n          const { X0, Y0, X1s, Y1s } = shortenSpokePx(px, py, cx, cy);\n          lineLayer\n            .append(\"line\")\n            .attr(\"x1\", X0)\n            .attr(\"y1\", Y0)\n            .attr(\"x2\", X1s)\n            .attr(\"y2\", Y1s)\n            .attr(\"stroke\", stroke)\n            .attr(\"stroke-width\", width)\n            .attr(\"stroke-linecap\", \"round\");\n        }\n\n        // ----- half-arc at parent radius (parent.angle → child.angle) -----\n        const a = arcByChild.get(cur.thisId);\n        if (a) {\n          arcLayer\n            .append(\"path\")\n            .attr(\n              \"d\",\n              lw.describeArc(\n                centerX,\n                centerY,\n                Math.max(0, radiusPx(a.radius)),\n                a.start,\n                a.end\n              )\n            )\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", stroke)\n            .attr(\"stroke-width\", width);\n        }\n\n        first = false;\n        cur = byId.get(cur.parentId);\n      }\n    }\n\n    // tip dot hover\n    tipDots\n      .on(\"mouseenter\", function(_event, d) {\n        drawRadialPath(d, hoverLines, hoverArcs, hoverStroke, hoverWidth);\n        d3.select(this).attr(\"r\", DOT_R + 2);\n      })\n      .on(\"mouseleave\", function() {\n        hoverLines.selectAll(\"*\").remove();\n        hoverArcs.selectAll(\"*\").remove();\n        d3.select(this).attr(\"r\", DOT_R);\n      });\n\n    if (highlightTips && highlightTips.length) {\n      const chosen = new Set(\n        [\n          ...highlightTips.filter(isNumber).map((id) => tipById.get(id)),\n          ...highlightTips\n            .filter((x) => !isNumber(x))\n            .map((lb) => tipByLabel.get(lb))\n        ].filter(Boolean)\n      );\n\n      chosen.forEach((tip) => {\n        drawRadialPath(\n          tip.thisId,\n          staticLines,\n          staticArcs,\n          highlightStroke,\n          highlightWidth\n        );\n      });\n    }\n\n    return svg.node();\n  } else if (layout === \"unrooted\") {\n    // UNROOTED LAYOUT\n    const parsedTree = lw.readTree(treeText);\n    const unrootedPhylo = lw.unrooted(parsedTree);\n\n    const w = width;\n    const h = height;\n\n    const xExtent = d3.extent(unrootedPhylo.data, (d) => d.x);\n    const yExtent = d3.extent(unrootedPhylo.data, (d) => d.y);\n    const maxX = Math.max(Math.abs(xExtent[0]), Math.abs(xExtent[1]));\n    const maxY = Math.max(Math.abs(yExtent[0]), Math.abs(yExtent[1]));\n    const maxRadius = Math.max(maxX, maxY);\n    const scaleUnroot = maxRadius + 2 * radialMargin;\n\n    const xScaleUnroot = d3\n      .scaleLinear()\n      .domain([-scaleUnroot, scaleUnroot])\n      .range([0, w]);\n    const yScaleUnroot = d3\n      .scaleLinear()\n      .domain([-scaleUnroot, scaleUnroot])\n      .range([h, 0]);\n\n    const svg = d3\n      .create(\"svg\")\n      .attr(\"width\", w)\n      .attr(\"height\", h)\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"font-size\", 10);\n\n    const group = svg.append(\"g\");\n    const staticLayer = svg.append(\"g\").attr(\"class\", \"phylo_static_highlight\");\n    const hoverLayer = svg.append(\"g\").attr(\"class\", \"phylo_hover_highlight\");\n\n    group\n      .append(\"g\")\n      .attr(\"class\", \"phylo_lines\")\n      .selectAll(\"line\")\n      .data(unrootedPhylo.edges)\n      .join(\"line\")\n      .attr(\"x1\", (d) => xScaleUnroot(d.x1))\n      .attr(\"y1\", (d) => yScaleUnroot(d.y1))\n      .attr(\"x2\", (d) => xScaleUnroot(d.x2))\n      .attr(\"y2\", (d) => yScaleUnroot(d.y2))\n      .attr(\"stroke-width\", strokeWidth)\n      .attr(\"stroke\", \"#777\");\n\n    const nodes = group\n      .append(\"g\")\n      .attr(\"class\", \"phylo_points\")\n      .selectAll(\"circle\")\n      .data(unrootedPhylo.data)\n      .join(\"circle\")\n      .attr(\"class\", \"dot\")\n      .attr(\"r\", (d) => (d.isTip ? 4 : 0))\n      .attr(\"cx\", (d) => xScaleUnroot(d.x))\n      .attr(\"cy\", (d) => yScaleUnroot(d.y))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"fill\", (d) => (d.isTip ? \"black\" : \"white\"));\n\n    const byId = new Map(unrootedPhylo.data.map((d) => [d.thisId, d]));\n    const tipById = new Map(\n      unrootedPhylo.data.filter((d) => d.isTip).map((d) => [d.thisId, d])\n    );\n    const tipByLabel = new Map(\n      unrootedPhylo.data.filter((d) => d.isTip).map((d) => [d.thisLabel, d])\n    );\n    const rootToTip = makeRootToTipGetter(byId, { prefer: \"r\" });\n\n    if (showTooltips) {\n      nodes\n        .filter((d) => d.isTip)\n        .append(\"title\")\n        .text((d) => tooltipFormatter(d, rootToTip(d.thisId)));\n    }\n\n    const tipEdges = new Map();\n    const nodesById = new Map(unrootedPhylo.data.map((d) => [d.thisId, d]));\n    unrootedPhylo.edges.forEach((edge) => {\n      const tipNode = nodesById.get(edge.id1);\n      if (tipNode?.isTip) tipEdges.set(edge.id1, edge);\n    });\n\n    if (tipLabels) {\n      const tipLabelsSel = group\n        .append(\"g\")\n        .attr(\"class\", \"phylo_labels\")\n        .selectAll(\"g\")\n        .data(unrootedPhylo.data.filter((d) => d.isTip))\n        .join(\"g\")\n        .attr(\"transform\", (d) => {\n          const x = xScaleUnroot(d.x);\n          const y = yScaleUnroot(d.y);\n          return `translate(${x},${y})`;\n        })\n        .each(function(d) {\n          const edge = tipEdges.get(d.thisId);\n          if (!edge) return;\n\n          const x1 = xScaleUnroot(edge.x1);\n          const y1 = yScaleUnroot(edge.y1);\n          const x2 = xScaleUnroot(edge.x2);\n          const y2 = yScaleUnroot(edge.y2);\n\n          const dx = x2 - x1;\n          const dy = y2 - y1;\n          let angle = (Math.atan2(dy, dx) * 180) / Math.PI;\n\n          let xOffset = -10;\n          let anchor = \"end\";\n          if (angle > 90 || angle < -90) {\n            angle += 180;\n            anchor = \"start\";\n            xOffset = 10;\n          }\n\n          d3.select(this)\n            .append(\"g\")\n            .attr(\"transform\", `rotate(${angle})`)\n            .append(\"text\")\n            .attr(\"x\", xOffset)\n            .attr(\"alignment-baseline\", \"middle\")\n            .attr(\"text-anchor\", anchor)\n            .attr(\"font-size\", 10)\n            .attr(\"fill\", \"black\")\n            .text(d.thisLabel?.replace(/_/g, \" \") ?? \"\");\n        });\n\n      if (showTooltips) {\n        tipLabelsSel\n          .append(\"title\")\n          .text((d) => tooltipFormatter(d, rootToTip(d.thisId)));\n      }\n\n      tipLabelsSel\n        .on(\"mouseenter\", function(_event, d) {\n          drawUnrootedPath(d.thisId, hoverLayer, hoverStroke, hoverWidth);\n          d3.select(this).select(\"text\").attr(\"font-weight\", 600);\n        })\n        .on(\"mouseleave\", function() {\n          hoverLayer.selectAll(\"*\").remove();\n          d3.select(this).select(\"text\").attr(\"font-weight\", null);\n        });\n    }\n\n    nodes\n      .filter((d) => d.isTip)\n      .on(\"mouseenter\", function(_event, d) {\n        drawUnrootedPath(d.thisId, hoverLayer, hoverStroke, hoverWidth);\n        d3.select(this).attr(\"r\", 6);\n      })\n      .on(\"mouseleave\", function() {\n        hoverLayer.selectAll(\"*\").remove();\n        d3.select(this).attr(\"r\", 4);\n      });\n\n    if (highlightTips && highlightTips.length) {\n      const chosen = new Set(\n        [\n          ...highlightTips.filter(isNumber).map((id) => tipById.get(id)),\n          ...highlightTips\n            .filter((x) => !isNumber(x))\n            .map((lb) => tipByLabel.get(lb))\n        ].filter(Boolean)\n      );\n      chosen.forEach((tip) => {\n        drawUnrootedPath(\n          tip.thisId,\n          staticLayer,\n          highlightStroke,\n          highlightWidth\n        );\n      });\n    }\n\n    function drawUnrootedPath(tipId, layer, stroke, width) {\n      const edgeFromChild = new Map(unrootedPhylo.edges.map((e) => [e.id1, e]));\n      layer.selectAll(\"*\").remove();\n      let cur = byId.get(tipId);\n      while (cur && cur.parentId != null) {\n        const e = edgeFromChild.get(cur.thisId);\n        if (e) {\n          layer\n            .append(\"line\")\n            .attr(\"x1\", xScaleUnroot(e.x1))\n            .attr(\"y1\", yScaleUnroot(e.y1))\n            .attr(\"x2\", xScaleUnroot(e.x2))\n            .attr(\"y2\", yScaleUnroot(e.y2))\n            .attr(\"stroke\", stroke)\n            .attr(\"stroke-width\", width)\n            .attr(\"stroke-linecap\", \"round\");\n        }\n        cur = byId.get(cur.parentId);\n      }\n    }\n\n    return svg.node();\n  } else {\n    throw new Error(\n      \"Unsupported layout type. Use 'rect', 'radial', or 'unrooted'.\"\n    );\n  }\n}\n"],"names":["polarToCartesian","cx","cy","r","t","x","Math","cos","y","sin","describeArc","radius","startAngle","endAngle","TAU","PI","norm","a0","a1","tmp","delta","p","largeArcFlag","p0","p1","preorder","node","list","push","i","children","length","fortify","tree","sort","df","parent","parentId","parentLabel","thisId","id","thisLabel","label","map","branchLength","isTip","angle","a","b","radialData","pd","byId","Map","d","kids","root","tipIds","dfs","c","get","ch","N","max","forEach","set","setInternalAngles","sx","sy","th","atan2","setR","r0","child","bl","radialLayout","data","radii","find","segments","theta","r1","childId","x0","y0","x1","y1","getRadii","arcs","childrenByParent","has","pid","A","k","aMin","aMax","direct","wrapped","start","end","span","isFinite","getArcs","child_arcs","getChildArcs","getHorizontal","idIndex","leafIds","n","tipSlot","setY","values","count","sum","value","mean","setX","xParent","row","_y","_x","_angle","item","rectangleLayout","vertical_lines","byParent","verticals","entries","yvals","min","heights","getVertical","child_vertical_lines","childVerticals","yc","yp","getChildVerticals","horizontal_lines","filter","equalAngleLayout","post","ntips","thisnode","result","queue","curnode","shift","levelorder","numTips","lastStart","arc","unrooted","eq","edges","rectangular","rows","id1","x2","y2","id2","undefined","readTree","text","tokens","String","replace","split","nodeId","token","nodeinfo","startsWith","parseFloat","console","warn","treeText","layout","width","height","margin","top","right","bottom","left","radialMargin","strokeWidth","radialMode","tipLabels","showTooltips","tooltipFormatter","rtt","toFixed","hoverStroke","hoverWidth","highlightTips","highlightStroke","highlightWidth","isNumber","Number","makeRootToTipGetter","prefer","tipId","tree_df","lw.rectangleLayout","lw.readTree","horizontal","vertical","tips","tipById","tipByLabel","rootToTip","maxY","d3","minY","maxX","yScale","scaleLinear","domain","range","xScale","svg","create","attr","group","append","staticLayer","hoverLayer","selectAll","join","tipDots","on","_event","drawRectPath","select","this","remove","labels","Set","lb","Boolean","tip","layer","stroke","cur","rad","lw.radialLayout","isOuter","DOT_R","END_CAP","scaleRadial","w","h","centerX","centerY","xScaleRadial","yScaleRadial","radiusPx","tipMaxR","childIdOf","spoke","shortenSpokePx","X0","Y0","dx","dy","len","hypot","X1s","Y1s","staticLines","staticArcs","hoverLines","hoverArcs","lw.describeArc","each","s","_i","cid","isTipSpoke","spokeByChild","arcByChild","xoff","anchor","event","drawRadialPath","target","lineLayer","arcLayer","first","px","py","unrootedPhylo","lw.unrooted","xExtent","extent","yExtent","abs","scaleUnroot","xScaleUnroot","yScaleUnroot","nodes","tipEdges","nodesById","edge","tipNode","tipLabelsSel","xOffset","drawUnrootedPath","edgeFromChild","e","Error"],"mappings":"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"}
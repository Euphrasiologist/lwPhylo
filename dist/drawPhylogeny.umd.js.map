{"version":3,"file":"drawPhylogeny.umd.js","sources":["../src/radial/polarToCartesian.js","../src/radial/describeArc.js","../src/utils/preorder.js","../src/utils/fortify.js","../src/radial/radialData.js","../src/radial/fanAngles.js","../src/radial/radialLayout.js","../src/radial/getRadii.js","../src/radial/getArcs.js","../src/radial/getChildArcs.js","../src/radial/getArcsFans.js","../src/rectangle/getHorizontal.js","../src/utils/mean.js","../src/rectangle/rectangleLayout.js","../src/rectangle/getVertical.js","../src/rectangle/getChildVerticals.js","../src/unrooted/equalAngleLayout.js","../src/utils/numTips.js","../src/unrooted/unrooted.js","../src/utils/edges.js","../src/utils/readTree.js","../src/plot/drawPhylogeny.js"],"sourcesContent":["// src/radial/polarToCartesian.js\nexport default function (cx, cy, r, t) {\n  return { x: cx + r * Math.cos(t), y: cy - r * Math.sin(t) };\n}\n","import polarToCartesian from \"./polarToCartesian.js\";\n\n/**\n * Draw the shortest arc between startAngle and endAngle (radians), CCW.\n * If the CW path is shorter, swap start/end so the CCW path is still shortest.\n * Works with Y-inverted screen coords (polarToCartesian already inverts Y).\n */\nexport default function describeArc(cx, cy, radius, startAngle, endAngle) {\n  const TAU = Math.PI * 2;\n  const norm = (t) => ((t % TAU) + TAU) % TAU;\n  let a0 = norm(startAngle);\n  let a1 = norm(endAngle);\n\n  // CCW and CW spans\n  const ccw = (a1 - a0 + TAU) % TAU;\n  const cw = (a0 - a1 + TAU) % TAU;\n\n  // Ensure we always take the shorter span *in CCW* by swapping if needed\n  if (cw < ccw) {\n    const tmp = a0; a0 = a1; a1 = tmp;\n  }\n\n  const delta = (a1 - a0 + TAU) % TAU;          // now the shorter CCW span\n  if (delta < 1e-9) {\n    const p = polarToCartesian(cx, cy, radius, a0);\n    return `M ${p.x} ${p.y}`;                   // degenerate span → no arc\n  }\n\n  const largeArcFlag = delta > Math.PI ? 1 : 0; // should be 0 for “shortest”, but keep for safety\n  const sweepFlag = 0;                          // CCW\n\n  const p0 = polarToCartesian(cx, cy, radius, a0);\n  const p1 = polarToCartesian(cx, cy, radius, a1);\n\n  return `M ${p0.x} ${p0.y} A ${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${p1.x} ${p1.y}`;\n}\n\n","/**\n * Recursive function for pre-order traversal of tree (returns array)\n */\nexport function preorder(node, list = []) {\n  list.push(node);\n  for (let i = 0; i < (node.children?.length || 0); i++) {\n    list = preorder(node.children[i], list);\n  }\n  return list;\n}\n\n/**\n * Iterative generator traversals (avoid recursion limits on large trees)\n */\nexport function* preorderIter(root) {\n  const stack = [root];\n  while (stack.length) {\n    const n = stack.pop();\n    yield n;\n    if (n.children) for (let i = n.children.length - 1; i >= 0; --i) stack.push(n.children[i]);\n  }\n}\n\nexport function* postorderIter(root) {\n  const stack = [[root, 0]];\n  while (stack.length) {\n    const top = stack[stack.length - 1];\n    const [n, i] = top;\n    if (!n.children || i >= n.children.length) {\n      stack.pop();\n      yield n;\n    } else {\n      top[1] = i + 1;\n      stack.push([n.children[i], 0]);\n    }\n  }\n}\n\n","import { preorder } from \"./preorder.js\"\n\n/**\n * Convert parsed Newick tree from readTree() into data\n * frame.\n * this is akin to a \"phylo\" object in R.\n */\n\nexport default function (tree, sort = true) {\n    var df = [];\n\n    for (const node of preorder(tree)) {\n        if (node.parent === null) {\n            df.push({\n                'parentId': null,\n                'parentLabel': null,\n                'thisId': node.id,\n                'thisLabel': node.label,\n                'children': node.children.map(x => x.id),\n                'branchLength': 0.,\n                'isTip': false,\n                'x': node.x,\n                'y': node.y,\n                'angle': node.angle\n            })\n        }\n        else {\n            df.push({\n                'parentId': node.parent.id,\n                'parentLabel': node.parent.label,\n                'thisId': node.id,\n                'thisLabel': node.label,\n                'children': node.children.map(x => x.id),\n                'branchLength': node.branchLength,\n                'isTip': (node.children.length == 0),\n                'x': node.x,\n                'y': node.y,\n                'angle': node.angle\n            })\n        }\n    }\n\n    if (sort) {\n        df = df.sort(function (a, b) {\n            return a.thisId - b.thisId;\n        })\n    }\n    return (df);\n}\n","import fortify from \"../utils/fortify.js\"\n\n/**\n * Compute per-node polar coordinates for radial layout:\n *  - Tip angles: evenly spaced 0..2π in tip DFS order\n *  - Internal angles: circular mean of child angles\n *  - Radii: cumulative branch length from root\n *  - x,y: cartesian projection\n *\n * Returns the fortified array with added {angle, r, x, y}.\n */\nexport default function radialData(node) {\n  const TAU = Math.PI * 2;\n  const norm = (t) => ((t % TAU) + TAU) % TAU;\n\n  const pd = fortify(node, /*sort*/ true);\n  const byId = new Map(pd.map(d => [d.thisId, d]));\n  const kids = new Map(pd.map(d => [d.thisId, d.children || []]));\n\n  // Find root id\n  let root = null;\n  for (const d of pd) {\n    if (d.parentId == null) { root = d.thisId; break; }\n  }\n\n  // Collect tip ids in DFS left->right order to preserve input ordering\n  const tipIds = [];\n  (function dfs(id) {\n    const c = kids.get(id) || [];\n    if (c.length === 0) {\n      tipIds.push(id);\n      return;\n    }\n    for (const ch of c) dfs(ch);\n  })(root);\n\n  // Assign tip angles evenly spaced 0..2π\n  const N = Math.max(1, tipIds.length);\n  const angle = new Map();\n  tipIds.forEach((id, i) => {\n    angle.set(id, (i / N) * TAU);\n  });\n\n  // Internal node angles: circular mean of child angles (post-order)\n  (function setInternalAngles(id) {\n    const c = kids.get(id) || [];\n    for (const ch of c) setInternalAngles(ch);\n    if (c.length > 0) {\n      let sx = 0, sy = 0;\n      for (const ch of c) {\n        const th = angle.get(ch);\n        sx += Math.cos(th);\n        sy += Math.sin(th);\n      }\n      angle.set(id, norm(Math.atan2(sy, sx)));\n    }\n  })(root);\n\n  // Radii: cumulative branch lengths from root (root r=0)\n  const radius = new Map();\n  radius.set(root, 0);\n  (function setR(id) {\n    const c = kids.get(id) || [];\n    const r0 = radius.get(id) || 0;\n    for (const ch of c) {\n      const child = byId.get(ch);\n      const bl = child?.branchLength ?? 0;\n      radius.set(ch, r0 + bl);\n      setR(ch);\n    }\n  })(root);\n\n  // Enrich pd rows with angle, r, x, y\n  for (const d of pd) {\n    const th = angle.get(d.thisId) ?? 0;\n    const r  = radius.get(d.thisId) ?? 0;\n    d.angle = th;\n    d.r = r;\n    d.x = r * Math.cos(th);\n    d.y = r * Math.sin(th);\n  }\n\n  return pd;\n}\n","// fanAngles.js\nconst TAU = Math.PI * 2;\nconst norm = (t) => ((t % TAU) + TAU) % TAU;\n\n// Unwrap angles around a reference so they sit within [ref-π, ref+π]\nfunction unwrapAround(ref, a) {\n  let x = a;\n  while (x < ref - Math.PI) x += TAU;\n  while (x > ref + Math.PI) x -= TAU;\n  return x;\n}\n\n/**\n * Compute APE \"fan\" compatible angles:\n *  - Tips evenly spaced over [0, span] where span = 2π*(1 - 1/Ntip) - gap\n *  - Then + rotate (radians)\n *  - Internal nodes = arithmetic mean of child angles (unwrapped)\n *\n * pd: fortified nodes array (has thisId, parentId, children[])\n * opts: { openAngleDeg=0, rotateDeg=0 }\n * returns: Map(nodeId -> angle)\n */\nexport default function fanAngles(pd, opts = {}) {\n  const { openAngleDeg = 0, rotateDeg = 0 } = opts;\n  const gap = (openAngleDeg / 360) * TAU;\n  const rotate = (rotateDeg / 360) * TAU;\n\n  // Find root and collect tips in cladewise/DFS order\n  let root = null;\n  const kids = new Map(pd.map(d => [d.thisId, d.children || []]));\n  for (const d of pd) if (d.parentId == null) { root = d.thisId; break; }\n\n  const tipIds = [];\n  (function dfs(id) {\n    const c = kids.get(id) || [];\n    if (!c.length) { tipIds.push(id); return; }\n    for (const ch of c) dfs(ch);\n  })(root);\n\n  const N = Math.max(1, tipIds.length);\n  // APE: 0 .. 2π*(1 - 1/N) - gap, length.out=N (no last step overlap)\n  const maxA = TAU * (1 - 1 / N) - gap;\n  const step = N > 1 ? maxA / (N - 1) : 0;\n\n  const angle = new Map();\n  tipIds.forEach((id, i) => {\n    angle.set(id, norm(i * step + rotate));\n  });\n\n  // Internal nodes: arithmetic mean of child angles (unwrapped)\n  (function setInternal(id) {\n    const c = kids.get(id) || [];\n    for (const ch of c) setInternal(ch);\n    if (c.length > 0) {\n      // unwrap child angles around the first child's angle\n      const a0 = angle.get(c[0]);\n      const unwrapped = c.map(ch => unwrapAround(a0, angle.get(ch)));\n      const mean = unwrapped.reduce((s, v) => s + v, 0) / unwrapped.length;\n      angle.set(id, norm(mean));\n    }\n  })(root);\n\n  return angle;\n}\n\n","import radialData from \"./radialData.js\"\nimport getRadii from \"./getRadii.js\"\nimport getArcs from \"./getArcs.js\"\nimport getChildArcs from \"./getChildArcs.js\"\nimport fanAngles from \"./fanAngles.js\";\nimport getArcsFan from \"./getArcsFans.js\";\n\n/**\n * Simple wrapper for radial layout:\n *  - data: per-node { angle, r, x, y, ... }\n *  - radii: per-edge radial spokes (parent.r → child.r)\n *  - arcs: per-parent arcs spanning all children at parent's radius\n *  - child_arcs: per-child half-arcs (parent.angle → child.angle) at parent's radius\n */\nexport default function radialLayout(node) {\n  const data = {};\n  data.data = radialData(node);\n  data.radii = getRadii(node);\n  data.arcs = getArcs(data.data);\n  data.child_arcs = getChildArcs(data.data);\n\n  const pd = fortify(node, true);\n  const angleMap = fanAngles(pd, {\n    openAngleDeg: opts.openAngleDeg ?? 0,\n    rotateDeg: opts.rotateDeg ?? 0\n  });\n\n  // stamp angles + x,y back onto pd (r stays your cumulative edge length)\n  for (const d of pd) {\n    d.angle = angleMap.get(d.thisId) ?? 0;\n    d.x = d.r * Math.cos(d.angle);\n    d.y = d.r * Math.sin(d.angle);\n  }\n\n  data.data_pd = pd;\n  data.arcs_fan = getArcsFan(pd);\n\n  return data;\n}\n\n","import radialData from \"./radialData.js\";\n\n/**\n * Per-edge radial segments (for highlighting and drawing).\n * For each non-root node, draw a radial line from the parent radius to the child radius\n * at the CHILD'S angle.\n *\n * Output: [{ parentId, childId, x0, y0, x1, y1, isTip }]\n */\nexport default function getRadii(node) {\n  const data = radialData(node);\n  const byId = new Map(data.map(d => [d.thisId, d]));\n  const root = data.find(d => d.parentId == null)?.thisId;\n\n  const segments = [];\n  for (const d of data) {\n    if (d.thisId === root) continue;\n    const parent = byId.get(d.parentId);\n    if (!parent) continue;\n\n    const theta = d.angle;\n    const r0 = parent.r;\n    const r1 = d.r;\n\n    segments.push({\n      parentId: parent.thisId,\n      childId: d.thisId,\n      x0: r0 * Math.cos(theta),\n      y0: r0 * Math.sin(theta),\n      x1: r1 * Math.cos(theta),\n      y1: r1 * Math.sin(theta),\n      isTip: !!d.isTip\n    });\n  }\n  return segments;\n}\n\n","/**\n * Build arc descriptors for each internal parent:\n *  - One arc per internal node at radius = parent.r\n *  - Start/end angles choose the *shortest* wrap-aware span covering the children\n *  - Skips degenerate spans (delta ~ 0)\n */\nexport default function getArcs(pd) {\n  const TAU = Math.PI * 2;\n  const norm = (t) => ((t % TAU) + TAU) % TAU;\n  const EPS = 1e-6;\n\n  // Quick lookups\n  const byId = new Map(pd.map(d => [d.thisId, d]));\n  const childrenByParent = new Map();\n  let root = null;\n\n  for (const d of pd) {\n    if (d.parentId == null) root = d.thisId;\n    if (!childrenByParent.has(d.parentId)) childrenByParent.set(d.parentId, []);\n    childrenByParent.get(d.parentId).push(d);\n  }\n\n  const arcs = [];\n\n  for (const parent of pd) {\n    const pid = parent.thisId;\n    if (pid === root) continue; // no arc above root\n    const kids = childrenByParent.get(pid) || [];\n    if (kids.length < 2) continue; // need at least two children\n\n    // Collect & sort child angles\n    const A = kids.map(k => norm(k.angle)).sort((a, b) => a - b);\n    const aMin = A[0], aMax = A[A.length - 1];\n\n    // Two candidate spans: direct (aMin -> aMax) and wrapped (aMax -> aMin across 2π)\n    const direct = aMax - aMin;\n    const wrapped = TAU - direct;\n\n    // Choose the shorter span. We'll draw **CCW** (sweepFlag = 0) in describeArc.\n    let start, end, span;\n    if (direct <= wrapped) {\n      start = aMin;\n      end = aMax;\n      span = direct;\n    } else {\n      // wrapped is shorter: go CCW from aMax up through 2π to aMin\n      start = aMax;\n      end = aMin;\n      span = wrapped;\n    }\n\n    if (span < EPS || !isFinite(parent.r) || parent.r <= 0) continue;\n\n    arcs.push({\n      start,\n      end,\n      radius: parent.r,\n      thisId: pid,\n      parentId: parent.parentId\n    });\n  }\n\n  return arcs;\n}\n\n","/**\n * Per-child \"half\" arcs for radial trees.\n *\n * For each non-root node (child), emit an arc at the PARENT's radius that\n * spans between the parent's angle and the child's angle. This is the arc\n * segment that meets the child's spoke and is ideal for root→tip highlighting.\n *\n * Input:  pd — the array returned by radialData(node) (each row has .thisId, .parentId, .angle, .r)\n * Output: [{ parentId, childId, radius, start, end }]\n */\nexport default function getChildArcs(pd) {\n  const byId = new Map(pd.map(d => [d.thisId, d]));\n  const arcs = [];\n\n  for (const child of pd) {\n    if (child.parentId == null) continue; // skip root\n    const parent = byId.get(child.parentId);\n    if (!parent) continue;\n\n    arcs.push({\n      parentId: parent.thisId,\n      childId: child.thisId,\n      radius: parent.r,        // draw on the parent's circle\n      start: parent.angle,     // start at parent's angle\n      end: child.angle         // end at child's angle (describeArc will choose the shortest CCW span)\n    });\n  }\n\n  return arcs;\n}\n\n","// getArcsFan.js\nimport polarToCartesian from \"./polarToCartesian.js\";\n\nconst TAU = Math.PI * 2;\nconst norm = (t) => ((t % TAU) + TAU) % TAU;\n\n/**\n * Build arcs like APE's circular.plot:\n *  For each internal parent, draw a single arc at radius=parent.r\n *  going from first child's angle to last child's angle in child order.\n *  If last < first (wrap), we draw CW (decreasing) to stay on the block.\n *\n * pd: array with { thisId, parentId, r, children[], angle }\n * returns: [{ parentId, thisId, radius, start, end, sweep }] \n *   where sweep=0 means CCW (start→end increasing),\n *         sweep=1 means CW  (start→end decreasing across wrap).\n */\nexport default function getArcsFan(pd) {\n  const byId = new Map(pd.map(d => [d.thisId, d]));\n  const arcs = [];\n\n  for (const p of pd) {\n    const c = p.children || [];\n    if (c.length < 2) continue;\n    const A = c.map(id => byId.get(id)?.angle).filter(a => a != null);\n    if (A.length < 2 || !isFinite(p.r) || p.r <= 0) continue;\n\n    // Children are contiguous in tip order; take first and last\n    let start = A[0];\n    let end = A[A.length - 1];\n\n    // Decide direction like APE’s seq(start, end): \n    // if end >= start → CCW; else CW across wrap.\n    const sweep = end >= start ? 0 : 1;\n\n    arcs.push({\n      parentId: p.parentId,\n      thisId: p.thisId,\n      radius: p.r,\n      start, end, sweep\n    });\n  }\n  return arcs;\n}\n\n","import mean from \"../utils/mean.js\"\nimport fortify from \"../utils/fortify.js\"\n\n/**\n * Rectangle layout: compute per-node x0,x1 and y0=y1\n * - Tip y is assigned by input order (preserves ladderize/order)\n * - Internal node y is mean of child y's\n * - x1 accumulates branch lengths from root\n */\n\nexport default function getHorizontal(node) {\n  const pd = fortify(node);\n\n  // Fast lookup from id -> pd index\n  const idIndex = new Map(pd.map((d, i) => [d.thisId, i]));\n\n  // 1) Leaf order from the INPUT TREE (respects your child order / ladderize)\n  const leafIds = [];\n  (function dfs(n) {\n    if (!n.children || n.children.length === 0) { leafIds.push(n.id); return; }\n    n.children.forEach(dfs);\n  })(node);\n\n  // Map each leaf id to a vertical slot (1..N)\n  const tipSlot = new Map(leafIds.map((id, i) => [id, i + 1]));\n\n  // 2) Set Y for tips directly from that order; internal node Y via children mean\n  (function setY(n) {\n    const i = idIndex.get(n.id);\n    if (!n.children || n.children.length === 0) {\n      const y = tipSlot.get(n.id);\n      pd[i].y0 = y; pd[i].y1 = y;\n      return y;\n    }\n    const ys = n.children.map(setY);\n    const y = mean(ys);\n    pd[i].y0 = y; pd[i].y1 = y;\n    return y;\n  })(node);\n\n  // 3) Set X by accumulating branch lengths down the tree\n  (function setX(n, xParent) {\n    const i = idIndex.get(n.id);\n    const bl = pd[i].branchLength ?? 0;\n    const x0 = xParent ?? 0;\n    const x1 = x0 + bl;\n    pd[i].x0 = x0; pd[i].x1 = x1;\n    if (n.children && n.children.length) n.children.forEach(c => setX(c, x1));\n  })(node, 0);\n\n  // Clean up: remove fields not needed downstream without triggering no-unused-vars\n  return pd.map((row) => {\n    const { y: _y, x: _x, angle: _angle, ...item } = row;\n    return item;\n  });\n}\n\n","/**\n * Iterable mean\n * Poached from https://github.com/d3/d3-array/blob/master/src/mean.js\n * (Other array means buggered up the tree)\n */\n\nexport default function (values, valueof) {\n    let count = 0;\n    let sum = 0;\n    if (valueof === undefined) {\n        for (let value of values) {\n            if (value != null && (value = +value) >= value) {\n                ++count, sum += value;\n            }\n        }\n    } else {\n        let index = -1;\n        for (let value of values) {\n            if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n                ++count, sum += value;\n            }\n        }\n    }\n    if (count) return sum / count;\n}\n","import getHorizontal from \"./getHorizontal.js\"\nimport getVertical from \"./getVertical.js\"\nimport getChildVerticals from \"./getChildVerticals.js\"\n\n/**\n * Rectangle layout wrapper.\n * Returns:\n *  - data: per-node rows (x0,x1,y0=y1,...)\n *  - vertical_lines: single spanning vertical per parent (baseline draw)\n *  - child_vertical_lines: one vertical per edge (for highlighting)\n *  - horizontal_lines: per-edge child horizontals (x0->x1 at y), with labels & tip flags\n */\nexport default function rectangleLayout(node) {\n  const data = getHorizontal(node);              // per-node\n  const vertical_lines = getVertical(node);      // parent spans\n  const child_vertical_lines = getChildVerticals(node); // per-edge verticals\n\n  // IMPORTANT: include y0 & y1, and carry isTip/labels for the renderer\n  const byId = new Map(data.map(d => [d.thisId, d]));\n  const horizontal_lines = data\n    .filter(d => d.parentId != null)\n    .map(d => ({\n      parentId: d.parentId,\n      childId: d.thisId,\n      thisId: d.thisId,\n      thisLabel: d.thisLabel,\n      isTip: d.isTip,\n      x0: d.x0,\n      x1: d.x1,\n      y0: d.y0,\n      y1: d.y0\n    }));\n\n  return { data, vertical_lines, child_vertical_lines, horizontal_lines };\n}\n\n","import getHorizontal from \"./getHorizontal.js\"\n\nexport default function getVertical(node) {\n  const data = getHorizontal(node);\n\n  // Group rows by parentId (children that share a parent)\n  const byParent = new Map();\n  for (const row of data) {\n    if (row.parentId == null) continue;\n    const a = byParent.get(row.parentId);\n    if (a) a.push(row); else byParent.set(row.parentId, [row]);\n  }\n\n  const verticals = [];\n  for (const [parentId, kids] of byParent.entries()) {\n    if (!kids.length) continue;\n    // Works for binary and multifurcations:\n    const yvals = kids.map(d => d.y0);\n    const y0 = Math.min(...yvals);\n    const y1 = Math.max(...yvals);\n    // All children share the same junction x (their x0)\n    const x = kids[0].x0;\n\n    verticals.push({\n      parentId,\n      x0: x,\n      x1: x,\n      y0,\n      y1,\n      heights: y1 - y0\n    });\n  }\n\n  return verticals;\n}\n\n","import getHorizontal from \"./getHorizontal.js\";\n\n/**\n * Build per-child vertical segments for a rectangular tree:\n * For each non-root node (child), draw a vertical from (parent.x, child.y) to (parent.x, parent.y).\n * This yields exactly one vertical per edge (child->parent), making highlighting trivial.\n *\n * Returns an array of:\n *   {\n *     parentId: number,\n *     childId: number,\n *     x: number,         // x of the parent junction\n *     y0: number,        // min(child.y, parent.y)\n *     y1: number,        // max(child.y, parent.y)\n *   }\n */\nexport default function getChildVerticals(node) {\n  const data = getHorizontal(node); // has parentId, thisId, x0,x1,y0=y1\n\n  // Build a quick index to access parent's y by id\n  const byId = new Map(data.map(d => [d.thisId, d]));\n\n  const childVerticals = [];\n\n  for (const d of data) {\n    if (d.parentId == null) continue;\n    const parent = byId.get(d.parentId);\n    if (!parent) continue;\n\n    const x = d.x0;            // child’s vertical sits at parent.x == child.x0\n    const yc = d.y0;           // child y\n    const yp = parent.y0;      // parent y\n    const y0 = Math.min(yc, yp);\n    const y1 = Math.max(yc, yp);\n\n    childVerticals.push({\n      parentId: d.parentId,\n      childId: d.thisId,\n      x,\n      y0,\n      y1\n    });\n  }\n\n  return childVerticals;\n}\n\n","import numTips from \"../utils/numTips.js\"\n\n/**\n * Equal-angle layout for unrooted trees.\n * - Precomputes ntips in O(n) to avoid repeated subtree counts\n * - Uses angles in \"π units\" (0..2) to match existing API\n * - Populates x,y positions from branchLength and angle\n */\n\nfunction annotateTipCounts(root) {\n  (function post(n) {\n    if (!n.children || n.children.length === 0) {\n      n.ntips = 1; return 1;\n    }\n    let sum = 0;\n    for (const c of n.children) sum += post(c);\n    n.ntips = sum;\n    return sum;\n  })(root);\n  return root;\n}\n\nfunction equalAngleLayout(node) {\n  if (node.parent === null) {\n    annotateTipCounts(node);\n    node.start = 0.;     // guarantees no arcs overlap 0\n    node.end = 2.;       // *π\n    node.angle = 0.;     // irrelevant at root\n    node.ntips = numTips(node); // safe (already computed), left for compatibility\n    node.x = 0;\n    node.y = 0;\n  }\n\n  let lastStart = node.start;\n\n  for (let i = 0; i < node.children.length; i++) {\n    const child = node.children[i];\n    const arc = (node.end - node.start) * (child.ntips / node.ntips);\n\n    child.start = lastStart;\n    child.end = lastStart + arc;\n\n    // bisect the arc in π-units\n    child.angle = child.start + (child.end - child.start) / 2.;\n    lastStart = child.end;\n\n    // map to coordinates (convert π-units to radians by multiplying by Math.PI)\n    const theta = child.angle * Math.PI;\n    const bl = (child.branchLength ?? 0);\n    child.x = node.x + bl * Math.sin(theta);\n    child.y = node.y + bl * Math.cos(theta);\n\n    equalAngleLayout(child);\n  }\n\n  return node;\n}\n\nexport default equalAngleLayout\n\n","/**\n * Recursive function for breadth-first search of a tree\n * the root node is visited first.\n */\n\nfunction levelorder(root) {\n  const queue = [root], result = [];\n  while (queue.length) {\n    const curnode = queue.shift();         // <- FIFO\n    result.push(curnode);\n    for (const child of curnode.children) queue.push(child);\n  }\n  return result;\n}\n\n\n/**\n * Count the number of tips that descend from this node\n */\n\nexport default function(thisnode) {\n  var result = 0;\n  for (const node of levelorder(thisnode)) {\n    if (node.children.length == 0) result++;\n  }\n  return (result);\n}\n","import edges from \"../utils/edges.js\";\nimport fortify from \"../utils/fortify.js\";\nimport equalAngleLayout from \"./equalAngleLayout.js\";\n\n/**\n * Simple wrapper function for equalAngleLayout()\n */\n\nexport default function (node) {\n  var data = {};\n  // use the Felsenstein equal angle layout algorithm\n  var eq = fortify(equalAngleLayout(node));\n  data.data = eq;\n  // make the edges dataset\n  data.edges = edges(eq);\n\n  return data;\n}\n","/**\n * Convert parsed Newick tree from fortify() into data frame of edges\n * this is akin to a \"phylo\" object in R, where thisID and parentId\n * are the $edge slot. I think.\n */\n\nexport default function edges(df, rectangular = false) {\n  const rows = [...df].sort((a, b) => a.thisId - b.thisId);\n  const byId = new Map(rows.map((r) => [r.thisId, r]));\n  const result = [];\n\n  for (const row of rows) {\n    if (row.parentId == null) continue;\n    const parent = byId.get(row.parentId);\n    if (!parent) continue;\n\n    if (rectangular) {\n      result.push({ x1: row.x, y1: row.y, id1: row.thisId, x2: parent.x, y2: row.y, id2: undefined });\n      result.push({ x1: parent.x, y1: row.y, id1: undefined, x2: parent.x, y2: parent.y, id2: row.parentId });\n    } else {\n      result.push({ x1: row.x, y1: row.y, id1: row.thisId, x2: parent.x, y2: parent.y, id2: row.parentId });\n    }\n  }\n  return result;\n}\n\n","/**\n * Parse a Newick tree string into a doubly-linked list of JS Objects.\n * Assigns labels, branch lengths, and node IDs (tips before internals if input emits them that way).\n *\n * Notes / limitations:\n * - Quoted labels and NHX annotations are not fully supported.\n * - Branch lengths in scientific notation are supported (parseFloat).\n */\n\nexport default function readTree(text) {\n  // Remove all whitespace (space, tabs, newlines)\n  text = String(text).replace(/\\s+/g, '');\n\n  const tokens = text.split(/(;|\\(|\\)|,)/);\n  const root = { parent: null, children: [] };\n  let curnode = root;\n  let nodeId = 0;\n\n  for (const token of tokens) {\n    if (!token || token === ';') continue;\n\n    if (token === '(') {\n      const child = { parent: curnode, children: [] };\n      curnode.children.push(child);\n      curnode = child; // descend\n    } else if (token === ',') {\n      // back to parent, then create sibling\n      curnode = curnode.parent;\n      const child = { parent: curnode, children: [] };\n      curnode.children.push(child);\n      curnode = child;\n    } else if (token === ')') {\n      // ascend one level\n      curnode = curnode.parent;\n      if (curnode === null) break;\n    } else {\n      // label/branch-length chunk (e.g., \"A:0.01\" or \"A\")\n      const nodeinfo = token.split(':');\n      if (nodeinfo.length === 1) {\n        if (token.startsWith(':')) {\n          curnode.label = '';\n          curnode.branchLength = parseFloat(nodeinfo[0]);\n        } else {\n          curnode.label = nodeinfo[0];\n          curnode.branchLength = null;\n        }\n      } else if (nodeinfo.length === 2) {\n        curnode.label = nodeinfo[0];\n        curnode.branchLength = parseFloat(nodeinfo[1]);\n      } else {\n        console.warn(token, \"Unhandled token with multiple ':' characters\");\n        curnode.label = nodeinfo[0] || '';\n        curnode.branchLength = parseFloat(nodeinfo[nodeinfo.length - 1]);\n      }\n      curnode.id = nodeId++; // assign then increment\n    }\n  }\n\n  // Ensure root has an id if not assigned during parsing\n  if (root.id == null) root.id = nodeId;\n\n  return root;\n}\n\n","import * as d3 from \"d3\";\nimport * as lw from \"../index.js\";\n\nexport default function drawPhylogeny(\n  treeText,\n  {\n    layout = \"rect\", // rect/radial/unrooted\n    width = 800,\n    height = 800,\n    margin = { top: 20, right: 300, bottom: 20, left: 50 },\n    radialMargin = 80,\n    strokeWidth = 1, // for the phylogeny branches\n    radialMode = \"outer\", // \"outer\" (co-circular tips) or \"phylo\" (true terminals)\n    tipLabels = true,\n    showTooltips = true,\n    tooltipFormatter = (d, rtt) =>\n      `${d.thisLabel ?? \"(unnamed)\"}\\nroot→tip: ${(+rtt).toFixed(4)}`,\n    hoverStroke = \"#1f77b4\",\n    hoverWidth = 3,\n    highlightTips = [], // array of tip labels or ids for static highlight (optional)\n    highlightStroke = \"#e63946\",\n    highlightWidth = 2.5\n  } = {}\n) {\n\n  // shared helpers\n  const isNumber = (x) => typeof x === \"number\" && Number.isFinite(x);\n  // Works for both radial (uses `r`) and rect (uses `x1`).\n  // Falls back to summing branchLength up to the root if neither is present.\n  function makeRootToTipGetter(byId, { prefer = \"auto\" } = {}) {\n    return function rootToTip(tipId) {\n      let n = byId.get(tipId);\n      if (!n) return 0;\n\n      // Prefer explicit cumulative fields if present\n      if (prefer === \"r\" || (prefer === \"auto\" && \"r\" in n)) {\n        return Number(n.r ?? 0);\n      }\n      if (prefer === \"x1\" || (prefer === \"auto\" && \"x1\" in n)) {\n        return Number(n.x1 ?? 0);\n      }\n\n      // Fallback: sum branchLength up the ancestry\n      let sum = 0;\n      while (n && n.parentId != null) {\n        sum += Number(n.branchLength || 0); // null/undefined → 0\n        n = byId.get(n.parentId);\n      }\n      return sum;\n    };\n  }\n\n\n  if (layout === \"rect\") {\n    // RECTANGULAR LAYOUT\n    const tree_df = lw.rectangleLayout(lw.readTree(treeText));\n    const horizontal = tree_df.horizontal_lines;\n    const vertical = tree_df.vertical_lines;\n    const tips = horizontal.filter((d) => d.isTip);\n\n    // indices & root→tip getter\n    const byId = new Map(horizontal.map((d) => [d.thisId, d]));\n    const tipById = new Map(tips.map((d) => [d.thisId, d]));\n    const tipByLabel = new Map(tips.map((d) => [d.thisLabel, d]));\n    const rootToTip = makeRootToTipGetter(byId, { prefer: \"x1\" }); \n\n    const maxY = d3.max(horizontal, (d) => d.y1);\n    const minY = d3.min(horizontal, (d) => d.y1);\n    const maxX = d3.max(horizontal, (d) => d.x1);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([minY - 1, maxY + 1])\n      .range([margin.top, height - margin.bottom]);\n\n    const xScale = d3\n      .scaleLinear()\n      .domain([0, maxX])\n      .range([margin.left, width - margin.right]);\n\n    const svg = d3\n      .create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"font-size\", 10);\n\n    const group = svg.append(\"g\");\n\n    // layers for highlight/hover\n    const staticLayer = svg.append(\"g\").attr(\"class\", \"phylo_static_highlight\");\n    const hoverLayer = svg.append(\"g\").attr(\"class\", \"phylo_hover_highlight\");\n\n    group\n      .selectAll(\".hline\")\n      .data(horizontal)\n      .join(\"line\")\n      .attr(\"x1\", (d) => xScale(d.x0))\n      .attr(\"y1\", (d) => yScale(d.y0))\n      .attr(\"x2\", (d) => xScale(d.x1))\n      .attr(\"y2\", (d) => yScale(d.y1))\n      .attr(\"stroke\", \"#555\")\n      .attr(\"stroke-width\", strokeWidth);\n\n    group\n      .selectAll(\".vline\")\n      .data(vertical)\n      .join(\"line\")\n      .attr(\"x1\", (d) => xScale(d.x0))\n      .attr(\"y1\", (d) => yScale(d.y0))\n      .attr(\"x2\", (d) => xScale(d.x1))\n      .attr(\"y2\", (d) => yScale(d.y1))\n      .attr(\"stroke\", \"#555\")\n      .attr(\"stroke-width\", strokeWidth);\n\n    // tip dots\n    const tipDots = group\n      .selectAll(\".tip-dot\")\n      .data(tips)\n      .join(\"circle\")\n      .attr(\"cx\", (d) => xScale(d.x1))\n      .attr(\"cy\", (d) => yScale(d.y1))\n      .attr(\"r\", 2)\n      .attr(\"fill\", \"black\");\n\n    // tooltips for rect dots\n    if (showTooltips) {\n      tipDots\n        .append(\"title\")\n        .text((d) => tooltipFormatter(d, rootToTip(d.thisId)));\n    }\n\n    // interactive root→tip highlight (rect) on dot hover\n    tipDots\n      .on(\"mouseenter\", function(_event, d) {\n        drawRectPath(d.thisId, hoverLayer, hoverStroke, hoverWidth);\n        d3.select(this).attr(\"r\", 4);\n      })\n      .on(\"mouseleave\", function() {\n        hoverLayer.selectAll(\"*\").remove();\n        d3.select(this).attr(\"r\", 2);\n      });\n\n    // labels\n    if (tipLabels) {\n      const labels = svg\n        .append(\"g\")\n        .attr(\"class\", \"phylo_labels\")\n        .selectAll(\"text\")\n        .data(tips)\n        .join(\"text\")\n        .attr(\"x\", (d) => xScale(d.x1) + 4)\n        .attr(\"y\", (d) => yScale(d.y1))\n        .attr(\"dy\", \"0.32em\")\n        .attr(\"font-size\", 10)\n        .text((d) => d.thisLabel?.replace(/_/g, \" \") ?? \"\");\n\n      if (showTooltips) {\n        labels\n          .append(\"title\")\n          .text((d) => tooltipFormatter(d, rootToTip(d.thisId)));\n      }\n\n      labels\n        .on(\"mouseenter\", function(_event, d) {\n          drawRectPath(d.thisId, hoverLayer, hoverStroke, hoverWidth);\n          d3.select(this).attr(\"font-weight\", 600);\n        })\n        .on(\"mouseleave\", function() {\n          hoverLayer.selectAll(\"*\").remove();\n          d3.select(this).attr(\"font-weight\", null);\n        });\n    }\n\n    // static highlight by ids/labels\n    if (highlightTips && highlightTips.length) {\n      const chosen = new Set(\n        [\n          ...highlightTips.filter(isNumber).map((id) => tipById.get(id)),\n          ...highlightTips\n            .filter((x) => !isNumber(x))\n            .map((lb) => tipByLabel.get(lb))\n        ].filter(Boolean)\n      );\n      chosen.forEach((tip) => {\n        drawRectPath(tip.thisId, staticLayer, highlightStroke, highlightWidth);\n      });\n    }\n\n    // helper to draw root→tip for rect (both vertical+horizontal)\n    function drawRectPath(tipId, layer, stroke, width) {\n      layer.selectAll(\"*\").remove();\n      let cur = byId.get(tipId);\n      while (cur && cur.parentId != null) {\n        const parent = byId.get(cur.parentId);\n        if (!parent) break;\n\n        // vertical at junction x0 from parent.y to child.y\n        layer\n          .append(\"line\")\n          .attr(\"x1\", xScale(cur.x0))\n          .attr(\"x2\", xScale(cur.x0))\n          .attr(\"y1\", yScale(parent.y0))\n          .attr(\"y2\", yScale(cur.y0))\n          .attr(\"stroke\", stroke)\n          .attr(\"stroke-width\", width)\n          .attr(\"stroke-linecap\", \"round\");\n\n        // horizontal along child's y, from junction x0 to x1\n        layer\n          .append(\"line\")\n          .attr(\"x1\", xScale(cur.x0))\n          .attr(\"x2\", xScale(cur.x1))\n          .attr(\"y1\", yScale(cur.y0))\n          .attr(\"y2\", yScale(cur.y1))\n          .attr(\"stroke\", stroke)\n          .attr(\"stroke-width\", width)\n          .attr(\"stroke-linecap\", \"round\");\n\n        cur = parent;\n      }\n    }\n\n    return svg.node();\n  } else if (layout === \"radial\") {\n    // RADIAL LAYOUT\n    if (width !== height) {\n      new Error(\"width and height must be the same for radial layout\");\n    }\n    const parsedTree = lw.readTree(treeText);\n    const rad = lw.radialLayout(parsedTree);\n\n    // ===== MODE =====\n    const TIP_MODE = radialMode; // \"phylo\" (shorten to original tips) or \"outer\" (project to one circle)\n    const isOuter = TIP_MODE === \"outer\";\n    if (TIP_MODE != \"phylo\" || TIP_MODE != \"outer\") {\n      new Error(\"radialMode must be either 'phylo' or 'outer'\");\n    }\n\n    // visuals (0 = let spokes reach the dots)\n    const DOT_R = 3;\n    const END_CAP = 0;\n\n    // ===== SCALES / BOUNDS =====\n    const maxRadius = d3.max(rad.data, (d) => d.r) ?? 0;\n    const scaleRadial = maxRadius + 2 * radialMargin;\n    const w = width,\n      h = height;\n    const centerX = w / 2,\n      centerY = h / 2;\n\n    const xScaleRadial = d3\n      .scaleLinear()\n      .domain([-scaleRadial, scaleRadial])\n      .range([0, w]);\n    const yScaleRadial = d3\n      .scaleLinear()\n      .domain([-scaleRadial, scaleRadial])\n      .range([h, 0]);\n    const radiusPx = (r) => r * (w / (2 * scaleRadial));\n\n    // ===== INDEXES / HELPERS =====\n    const byId = new Map(rad.data.map((d) => [d.thisId, d]));\n    const tips = rad.data.filter((d) => d.isTip);\n    const tipMaxR = tips.length ? d3.max(tips, (d) => d.r) : 0;\n    const rootToTip = makeRootToTipGetter(byId, { prefer: \"r\" });\n    const tipById = new Map(tips.map((d) => [d.thisId, d])); // HILITE:\n    const tipByLabel = new Map(tips.map((d) => [d.thisLabel, d])); // HILITE:\n\n    // Robust child-id extractor (handles multiple shapes)\n    function childIdOf(spoke) {\n      // prefer explicit child id fields; fall back to thisId; last-ditch id1 (seen in some edge shapes)\n      return spoke.childId ?? spoke.thisId ?? spoke.id1 ?? null;\n    }\n\n    // Shorten the *screen-space* end of a spoke by END_CAP px\n    function shortenSpokePx(x0, y0, x1, y1) {\n      const X0 = xScaleRadial(x0),\n        Y0 = yScaleRadial(y0);\n      const X1 = xScaleRadial(x1),\n        Y1 = yScaleRadial(y1);\n      const dx = X1 - X0,\n        dy = Y1 - Y0;\n      const len = Math.hypot(dx, dy) || 1;\n      const t = Math.max(0, (len - END_CAP) / len);\n      return { X0, Y0, X1s: X0 + dx * t, Y1s: Y0 + dy * t, len };\n    }\n\n    // ===== SVG ROOT =====\n    const svg = d3\n      .create(\"svg\")\n      .attr(\"width\", w)\n      .attr(\"height\", h)\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"font-size\", 10);\n\n    const group = svg.append(\"g\");\n\n    // overlay groups (drawn on top)\n    const staticLines = svg.append(\"g\").attr(\"class\", \"phylo_static_lines\"); // HILITE:\n    const staticArcs = svg.append(\"g\").attr(\"class\", \"phylo_static_arcs\"); // HILITE:\n    const hoverLines = svg.append(\"g\").attr(\"class\", \"phylo_hover_lines\"); // HILITE:\n    const hoverArcs = svg.append(\"g\").attr(\"class\", \"phylo_hover_arcs\"); // HILITE:\n\n    // ===== ARCS (parent circles) =====\n    group\n      .append(\"g\")\n      .attr(\"class\", \"phylo_arcs\")\n      .selectAll(\"path\")\n      .data(rad.arcs)\n      .join(\"path\")\n      .attr(\"d\", (d) =>\n        lw.describeArc(\n          centerX,\n          centerY,\n          Math.max(0, radiusPx(d.radius)),\n          d.start,\n          d.end\n        )\n      )\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#777\")\n      .attr(\"stroke-width\", strokeWidth);\n\n    // ===== RADII (spokes) =====\n    group\n      .append(\"g\")\n      .attr(\"class\", \"phylo_radii\")\n      .selectAll(\"line\")\n      .data(rad.radii)\n      .join(\"line\")\n      .each(function(s, _i) {\n        // parent end (data space)\n        const x0 = s.x0,\n          y0 = s.y0;\n\n        // child end (data space), shape-agnostic\n        const cid = childIdOf(s);\n        const node = cid != null ? byId.get(cid) : undefined;\n        const isTipSpoke = !!(node && node.isTip);\n\n        // default to the original child endpoint from the spoke record\n        let x1 = s.x1,\n          y1 = s.y1;\n\n        // In \"outer\" mode, project only *tip* spokes to the common circle\n        if (isOuter && isTipSpoke) {\n          x1 = tipMaxR * Math.cos(node.angle);\n          y1 = tipMaxR * Math.sin(node.angle);\n        }\n\n        // Shorten in screen space so the spoke doesn’t pierce the dot (END_CAP can be 0)\n        const { X0, Y0, X1s, Y1s, _len } = shortenSpokePx(x0, y0, x1, y1);\n\n        d3.select(this)\n          .attr(\"x1\", X0)\n          .attr(\"y1\", Y0)\n          .attr(\"x2\", X1s)\n          .attr(\"y2\", Y1s)\n          .attr(\"stroke\", \"#777\")\n          .attr(\"stroke-width\", strokeWidth);\n      });\n\n    // ===== TIP DOTS =====\n    const tipDots = group\n      .append(\"g\")\n      .attr(\"class\", \"phylo_tip_dots\")\n      .selectAll(\"circle\")\n      .data(tips)\n      .join(\"circle\")\n      .each(function(d, _i) {\n        // dot at original tip (align) or projected circle (outer)\n        const x = isOuter ? tipMaxR * Math.cos(d.angle) : d.x;\n        const y = isOuter ? tipMaxR * Math.sin(d.angle) : d.y;\n\n        d3.select(this)\n          .attr(\"cx\", xScaleRadial(x))\n          .attr(\"cy\", yScaleRadial(y))\n          .attr(\"r\", DOT_R)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 1.5);\n      });\n\n    if (showTooltips) {\n      tipDots\n        .append(\"title\")\n        .text((d) => tooltipFormatter(d, rootToTip(d.thisId)));\n    }\n\n    // maps for fast lookup on hover (childId → spoke / arc)\n    const spokeByChild = new Map(rad.radii.map((s) => [childIdOf(s), s]));\n    const arcByChild = new Map(rad.child_arcs.map((a) => [a.childId, a]));\n\n    // ===== LABELS =====\n    // Labels — make them follow the tip position used by the current mode\n    if (tipLabels) {\n      const labels = group\n        .append(\"g\")\n        .attr(\"class\", \"phylo_labels\")\n        .selectAll(\"g.label\")\n        .data(tips)\n        .join(\"g\")\n        .attr(\"class\", \"label\")\n        .attr(\"transform\", (d) => {\n          // same tip position rule as dots/spokes:\n          //  - \"outer\": snap to common ring (tipMaxR)\n          //  - otherwise (e.g. \"align\"/\"phylo\"): true tip radius\n          const r = isOuter ? tipMaxR : d.r;\n          const x = r * Math.cos(d.angle);\n          const y = r * Math.sin(d.angle);\n          return `translate(${xScaleRadial(x)},${yScaleRadial(y)})`;\n        })\n        .each(function(d) {\n          // rotate so text reads outward; flip when on the left side\n          let angle = (-d.angle * 180) / Math.PI;\n          let xoff = 10; // radial padding for text (px)\n          let anchor = \"start\";\n          if (d.angle > Math.PI / 2 && d.angle < (3 * Math.PI) / 2) {\n            angle += 180;\n            xoff *= -1;\n            anchor = \"end\";\n          }\n          d3.select(this)\n            .append(\"g\")\n            .attr(\"transform\", `rotate(${angle})`)\n            .append(\"text\")\n            .attr(\"x\", xoff)\n            .attr(\"alignment-baseline\", \"middle\")\n            .attr(\"text-anchor\", anchor)\n            .attr(\"font-size\", 10)\n            .attr(\"fill\", \"black\")\n            .text((d) => d.thisLabel?.replace(/_/g, \" \") ?? \"\");\n        });\n\n      if (showTooltips) {\n        labels\n          .append(\"title\")\n          .text((d) => tooltipFormatter(d, rootToTip(d.thisId)));\n      }\n\n      // label hover\n      labels\n        .on(\"mouseenter\", function(event, d) {\n          drawRadialPath(d, hoverLines, hoverArcs, hoverStroke, hoverWidth);\n          d3.select(this).select(\"text\").attr(\"font-weight\", 600);\n        })\n        .on(\"mouseleave\", function() {\n          hoverLines.selectAll(\"*\").remove();\n          hoverArcs.selectAll(\"*\").remove();\n          d3.select(this).select(\"text\").attr(\"font-weight\", null);\n        });\n    }\n\n    // draw (overlay) the root→tip path: spokes + arcs (half-arc per child)\n    function drawRadialPath(\n      target,\n      lineLayer,\n      arcLayer,\n      stroke = \"#1f77b4\",\n      width = 3\n    ) {\n      // target may be a tip node *or* a numeric tip id\n      lineLayer.selectAll(\"*\").remove();\n      arcLayer.selectAll(\"*\").remove();\n\n      let cur = typeof target === \"number\" ? byId.get(target) : target;\n      if (!cur) return;\n\n      let first = true;\n      while (cur && cur.parentId != null) {\n        // ----- spoke (parent → child) -----\n        const s = spokeByChild.get(cur.thisId);\n        if (s) {\n          const px = s.x0,\n            py = s.y0;\n          let cx = s.x1,\n            cy = s.y1;\n          if (isOuter && first && cur.isTip) {\n            const r = tipMaxR;\n            cx = r * Math.cos(cur.angle);\n            cy = r * Math.sin(cur.angle);\n          }\n          const { X0, Y0, X1s, Y1s } = shortenSpokePx(px, py, cx, cy);\n          lineLayer\n            .append(\"line\")\n            .attr(\"x1\", X0)\n            .attr(\"y1\", Y0)\n            .attr(\"x2\", X1s)\n            .attr(\"y2\", Y1s)\n            .attr(\"stroke\", stroke)\n            .attr(\"stroke-width\", width)\n            .attr(\"stroke-linecap\", \"round\");\n        }\n\n        // ----- half-arc at parent radius (parent.angle → child.angle) -----\n        const a = arcByChild.get(cur.thisId);\n        if (a) {\n          arcLayer\n            .append(\"path\")\n            .attr(\n              \"d\",\n              lw.describeArc(\n                centerX,\n                centerY,\n                Math.max(0, radiusPx(a.radius)),\n                a.start,\n                a.end\n              )\n            )\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", stroke)\n            .attr(\"stroke-width\", width);\n        }\n\n        first = false;\n        cur = byId.get(cur.parentId);\n      }\n    }\n\n    // tip dot hover\n    tipDots\n      .on(\"mouseenter\", function(_event, d) {\n        drawRadialPath(d, hoverLines, hoverArcs, hoverStroke, hoverWidth);\n        d3.select(this).attr(\"r\", DOT_R + 2);\n      })\n      .on(\"mouseleave\", function() {\n        hoverLines.selectAll(\"*\").remove();\n        hoverArcs.selectAll(\"*\").remove();\n        d3.select(this).attr(\"r\", DOT_R);\n      });\n\n    if (highlightTips && highlightTips.length) {\n      const chosen = new Set(\n        [\n          ...highlightTips.filter(isNumber).map((id) => tipById.get(id)),\n          ...highlightTips\n            .filter((x) => !isNumber(x))\n            .map((lb) => tipByLabel.get(lb))\n        ].filter(Boolean)\n      );\n\n      chosen.forEach((tip) => {\n        drawRadialPath(\n          tip.thisId,\n          staticLines,\n          staticArcs,\n          highlightStroke,\n          highlightWidth\n        );\n      });\n    }\n\n    return svg.node();\n  } else if (layout === \"unrooted\") {\n    // UNROOTED LAYOUT\n    const parsedTree = lw.readTree(treeText);\n    const unrootedPhylo = lw.unrooted(parsedTree);\n\n    const w = width;\n    const h = height;\n\n    const xExtent = d3.extent(unrootedPhylo.data, (d) => d.x);\n    const yExtent = d3.extent(unrootedPhylo.data, (d) => d.y);\n    const maxX = Math.max(Math.abs(xExtent[0]), Math.abs(xExtent[1]));\n    const maxY = Math.max(Math.abs(yExtent[0]), Math.abs(yExtent[1]));\n    const maxRadius = Math.max(maxX, maxY);\n    const scaleUnroot = maxRadius + 2 * radialMargin;\n\n    const xScaleUnroot = d3\n      .scaleLinear()\n      .domain([-scaleUnroot, scaleUnroot])\n      .range([0, w]);\n    const yScaleUnroot = d3\n      .scaleLinear()\n      .domain([-scaleUnroot, scaleUnroot])\n      .range([h, 0]);\n\n    const svg = d3\n      .create(\"svg\")\n      .attr(\"width\", w)\n      .attr(\"height\", h)\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"font-size\", 10);\n\n    const group = svg.append(\"g\");\n    const staticLayer = svg.append(\"g\").attr(\"class\", \"phylo_static_highlight\");\n    const hoverLayer = svg.append(\"g\").attr(\"class\", \"phylo_hover_highlight\");\n\n    group\n      .append(\"g\")\n      .attr(\"class\", \"phylo_lines\")\n      .selectAll(\"line\")\n      .data(unrootedPhylo.edges)\n      .join(\"line\")\n      .attr(\"x1\", (d) => xScaleUnroot(d.x1))\n      .attr(\"y1\", (d) => yScaleUnroot(d.y1))\n      .attr(\"x2\", (d) => xScaleUnroot(d.x2))\n      .attr(\"y2\", (d) => yScaleUnroot(d.y2))\n      .attr(\"stroke-width\", strokeWidth)\n      .attr(\"stroke\", \"#777\");\n\n    const nodes = group\n      .append(\"g\")\n      .attr(\"class\", \"phylo_points\")\n      .selectAll(\"circle\")\n      .data(unrootedPhylo.data)\n      .join(\"circle\")\n      .attr(\"class\", \"dot\")\n      .attr(\"r\", (d) => (d.isTip ? 4 : 0))\n      .attr(\"cx\", (d) => xScaleUnroot(d.x))\n      .attr(\"cy\", (d) => yScaleUnroot(d.y))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"fill\", (d) => (d.isTip ? \"black\" : \"white\"));\n\n    const byId = new Map(unrootedPhylo.data.map((d) => [d.thisId, d]));\n    const tipById = new Map(\n      unrootedPhylo.data.filter((d) => d.isTip).map((d) => [d.thisId, d])\n    );\n    const tipByLabel = new Map(\n      unrootedPhylo.data.filter((d) => d.isTip).map((d) => [d.thisLabel, d])\n    );\n    const rootToTip = makeRootToTipGetter(byId);\n\n    if (showTooltips) {\n      nodes\n        .filter((d) => d.isTip)\n        .append(\"title\")\n        .text((d) => tooltipFormatter(d, rootToTip(d.thisId)));\n    }\n\n    const tipEdges = new Map();\n    const nodesById = new Map(unrootedPhylo.data.map((d) => [d.thisId, d]));\n    unrootedPhylo.edges.forEach((edge) => {\n      const tipNode = nodesById.get(edge.id1);\n      if (tipNode?.isTip) tipEdges.set(edge.id1, edge);\n    });\n\n    if (tipLabels) {\n      const tipLabelsSel = group\n        .append(\"g\")\n        .attr(\"class\", \"phylo_labels\")\n        .selectAll(\"g\")\n        .data(unrootedPhylo.data.filter((d) => d.isTip))\n        .join(\"g\")\n        .attr(\"transform\", (d) => {\n          const x = xScaleUnroot(d.x);\n          const y = yScaleUnroot(d.y);\n          return `translate(${x},${y})`;\n        })\n        .each(function(d) {\n          const edge = tipEdges.get(d.thisId);\n          if (!edge) return;\n\n          const x1 = xScaleUnroot(edge.x1);\n          const y1 = yScaleUnroot(edge.y1);\n          const x2 = xScaleUnroot(edge.x2);\n          const y2 = yScaleUnroot(edge.y2);\n\n          const dx = x2 - x1;\n          const dy = y2 - y1;\n          let angle = (Math.atan2(dy, dx) * 180) / Math.PI;\n\n          let xOffset = -10;\n          let anchor = \"end\";\n          if (angle > 90 || angle < -90) {\n            angle += 180;\n            anchor = \"start\";\n            xOffset = 10;\n          }\n\n          d3.select(this)\n            .append(\"g\")\n            .attr(\"transform\", `rotate(${angle})`)\n            .append(\"text\")\n            .attr(\"x\", xOffset)\n            .attr(\"alignment-baseline\", \"middle\")\n            .attr(\"text-anchor\", anchor)\n            .attr(\"font-size\", 10)\n            .attr(\"fill\", \"black\")\n            .text(d.thisLabel?.replace(/_/g, \" \") ?? \"\");\n        });\n\n      if (showTooltips) {\n        tipLabelsSel\n          .append(\"title\")\n          .text((d) => tooltipFormatter(d, rootToTip(d.thisId)));\n      }\n\n      tipLabelsSel\n        .on(\"mouseenter\", function(_event, d) {\n          drawUnrootedPath(d.thisId, hoverLayer, hoverStroke, hoverWidth);\n          d3.select(this).select(\"text\").attr(\"font-weight\", 600);\n        })\n        .on(\"mouseleave\", function() {\n          hoverLayer.selectAll(\"*\").remove();\n          d3.select(this).select(\"text\").attr(\"font-weight\", null);\n        });\n    }\n\n    nodes\n      .filter((d) => d.isTip)\n      .on(\"mouseenter\", function(_event, d) {\n        drawUnrootedPath(d.thisId, hoverLayer, hoverStroke, hoverWidth);\n        d3.select(this).attr(\"r\", 6);\n      })\n      .on(\"mouseleave\", function() {\n        hoverLayer.selectAll(\"*\").remove();\n        d3.select(this).attr(\"r\", 4);\n      });\n\n    if (highlightTips && highlightTips.length) {\n      const chosen = new Set(\n        [\n          ...highlightTips.filter(isNumber).map((id) => tipById.get(id)),\n          ...highlightTips\n            .filter((x) => !isNumber(x))\n            .map((lb) => tipByLabel.get(lb))\n        ].filter(Boolean)\n      );\n      chosen.forEach((tip) => {\n        drawUnrootedPath(\n          tip.thisId,\n          staticLayer,\n          highlightStroke,\n          highlightWidth\n        );\n      });\n    }\n\n    function drawUnrootedPath(tipId, layer, stroke, width) {\n      const edgeFromChild = new Map(unrootedPhylo.edges.map((e) => [e.id1, e]));\n      layer.selectAll(\"*\").remove();\n      let cur = byId.get(tipId);\n      while (cur && cur.parentId != null) {\n        const e = edgeFromChild.get(cur.thisId);\n        if (e) {\n          layer\n            .append(\"line\")\n            .attr(\"x1\", xScaleUnroot(e.x1))\n            .attr(\"y1\", yScaleUnroot(e.y1))\n            .attr(\"x2\", xScaleUnroot(e.x2))\n            .attr(\"y2\", yScaleUnroot(e.y2))\n            .attr(\"stroke\", stroke)\n            .attr(\"stroke-width\", width)\n            .attr(\"stroke-linecap\", \"round\");\n        }\n        cur = byId.get(cur.parentId);\n      }\n    }\n\n    return svg.node();\n  } else {\n    throw new Error(\n      \"Unsupported layout type. Use 'rect', 'radial', or 'unrooted'.\"\n    );\n  }\n}\n"],"names":["polarToCartesian","cx","cy","r","t","x","Math","cos","y","sin","describeArc","radius","startAngle","endAngle","TAU","PI","norm","a0","a1","tmp","delta","p","largeArcFlag","p0","p1","preorder","node","list","push","i","children","length","fortify$1","tree","sort","df","parent","parentId","parentLabel","thisId","id","thisLabel","label","map","branchLength","isTip","angle","a","b","radialData","pd","fortify","byId","Map","d","kids","root","tipIds","dfs","c","get","ch","N","max","forEach","set","setInternalAngles","sx","sy","th","atan2","setR","r0","child","bl","fanAngles","opts","openAngleDeg","rotateDeg","gap","rotate","step","setInternal","unwrapped","ref","unwrapAround","mean","reduce","s","v","radialLayout","data","radii","find","segments","theta","r1","childId","x0","y0","x1","y1","getRadii","arcs","childrenByParent","has","pid","A","k","aMin","aMax","direct","wrapped","start","end","span","isFinite","getArcs","child_arcs","getChildArcs","angleMap","data_pd","arcs_fan","filter","sweep","getArcsFan","getHorizontal","idIndex","leafIds","n","tipSlot","setY","values","count","sum","value","setX","xParent","row","_y","_x","_angle","item","rectangleLayout","vertical_lines","byParent","verticals","entries","yvals","min","heights","getVertical","child_vertical_lines","childVerticals","yc","yp","getChildVerticals","horizontal_lines","equalAngleLayout","post","ntips","thisnode","result","queue","curnode","shift","levelorder","numTips","lastStart","arc","unrooted","eq","edges","rectangular","rows","id1","x2","y2","id2","undefined","readTree","text","tokens","String","replace","split","nodeId","token","nodeinfo","startsWith","parseFloat","console","warn","treeText","layout","width","height","margin","top","right","bottom","left","radialMargin","strokeWidth","radialMode","tipLabels","showTooltips","tooltipFormatter","rtt","toFixed","hoverStroke","hoverWidth","highlightTips","highlightStroke","highlightWidth","isNumber","Number","makeRootToTipGetter","prefer","tipId","tree_df","lw.rectangleLayout","lw.readTree","horizontal","vertical","tips","tipById","tipByLabel","rootToTip","maxY","d3","minY","maxX","yScale","scaleLinear","domain","range","xScale","svg","create","attr","group","append","staticLayer","hoverLayer","selectAll","join","tipDots","on","_event","drawRectPath","select","this","remove","labels","Set","lb","Boolean","tip","layer","stroke","cur","rad","lw.radialLayout","isOuter","DOT_R","END_CAP","scaleRadial","w","h","centerX","centerY","xScaleRadial","yScaleRadial","radiusPx","tipMaxR","childIdOf","spoke","shortenSpokePx","X0","Y0","dx","dy","len","hypot","X1s","Y1s","staticLines","staticArcs","hoverLines","hoverArcs","lw.describeArc","each","_i","cid","isTipSpoke","spokeByChild","arcByChild","xoff","anchor","event","drawRadialPath","target","lineLayer","arcLayer","first","px","py","unrootedPhylo","lw.unrooted","xExtent","extent","yExtent","abs","scaleUnroot","xScaleUnroot","yScaleUnroot","nodes","tipEdges","nodesById","edge","tipNode","tipLabelsSel","xOffset","drawUnrootedPath","edgeFromChild","e","Error"],"mappings":"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"}
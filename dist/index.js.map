{"version":3,"file":"index.js","sources":["../src/phisheye/phisheye.js","../src/radial/polarToCartesian.js","../src/radial/describeArc.js","../src/utils/preorder.js","../src/utils/fortify.js","../src/radial/radialData.js","../src/radial/getArcs.js","../src/radial/radialLayout.js","../src/radial/getRadii.js","../src/rectangle/getHorizontal.js","../src/utils/mean.js","../src/rectangle/rectangleLayout.js","../src/rectangle/getVertical.js","../src/rectangle/getChildVerticals.js","../src/unrooted/equalAngleLayout.js","../src/utils/numTips.js","../src/unrooted/unrooted.js","../src/utils/edges.js","../src/utils/parentFisheye.js","../src/utils/readTree.js","../src/utils/subTree.js"],"sourcesContent":["// Based on the archived d3 fisheye plugin, modernized & hardened.\n// - Works in screen/pixel space (set xscale/yscale).\n// - O(1) math with precomputed constants; avoids unnecessary sqrt.\n// - Stable API: .radius(), .distortion(), .focus(), .scales()\n// - Returns { x, y, z } where z ~= local magnification (clamped).\n// - Adds small ergonomics: .setScales(), .focusFromEvent(), .clampZ()\n\nconst phisheye = {\n  circular: () => {\n    let radius = 200;        // pixels\n    let distortion = 2;      // dimensionless\n    let focus = [0, 0];      // [fx, fy] in pixels\n    let scales = {};         // { xscale, yscale }\n    let k0 = 0, k1 = 0;      // precomputed factors\n    let radius2 = radius * radius;\n    let zClamp = 10;         // max z (magnification) for stability\n\n    function ensureScales() {\n      if (!scales || typeof scales.xscale !== \"function\" || typeof scales.yscale !== \"function\") {\n        throw new Error(\"phisheye.circular: call .scales(xscale, yscale) before using the fisheye.\");\n      }\n    }\n\n    function rescale() {\n      // Same functional form as the classic plugin:\n      // k = ((e^d) / (e^d - 1)) * R * (1 - exp(-d * r / R)) / r\n      // where d=distortion, R=radius, r=distance to focus.\n      const e = Math.exp(distortion);\n      k0 = (e / (e - 1)) * radius;  // constant multiplier\n      k1 = distortion / radius;     // exponent scale\n      radius2 = radius * radius;\n      return fisheye;\n    }\n\n    function fisheye(d) {\n      ensureScales();\n\n      const x0 = scales.xscale(d.x);\n      const y0 = scales.yscale(d.y);\n\n      const dx = x0 - focus[0];\n      const dy = y0 - focus[1];\n      const dd2 = dx * dx + dy * dy;\n\n      // At the focus or outside radius -> identity mapping, z ~ 1\n      if (dd2 === 0 || dd2 >= radius2) {\n        return { x: x0, y: y0, z: dd2 >= radius2 ? 1 : zClamp };\n      }\n\n      const dd = Math.sqrt(dd2);\n      // Classic mapping (with a slight blend for gentler core)\n      const k = ((k0 * (1 - Math.exp(-dd * k1))) / dd) * 0.75 + 0.25;\n\n      // New position\n      const x = focus[0] + dx * k;\n      const y = focus[1] + dy * k;\n\n      // Local magnification proxy (clamped)\n      const z = Math.min(k, zClamp);\n\n      return { x, y, z };\n    }\n\n    // --- Public API ---\n\n    fisheye.radius = function(_) {\n      if (!arguments.length) return radius;\n      radius = Math.max(0, +_);\n      return rescale();\n    };\n\n    fisheye.distortion = function(_) {\n      if (!arguments.length) return distortion;\n      distortion = Math.max(0, +_);\n      return rescale();\n    };\n\n    fisheye.focus = function(_) {\n      if (!arguments.length) return focus.slice();\n      if (!Array.isArray(_) || _.length !== 2) throw new Error(\"focus expects [x, y] in pixels.\");\n      focus = [+_[0], +_[1]];\n      return fisheye;\n    };\n\n    fisheye.scales = function(xscale, yscale) {\n      if (!arguments.length) return scales;\n      scales = { xscale, yscale };\n      return fisheye;\n    };\n\n    // Convenience alias\n    fisheye.setScales = fisheye.scales;\n\n    // Clamp maximum z (magnification) returned; defaults to 10\n    fisheye.clampZ = function(_) {\n      if (!arguments.length) return zClamp;\n      zClamp = Math.max(1, +_);\n      return fisheye;\n    };\n\n    // Convenience: set focus from a pointer event relative to an HTMLElement/SVG\n    // Example: svg.on(\"pointermove\", (e) => fe.focusFromEvent(e, svg.node()))\n    fisheye.focusFromEvent = function(event, element) {\n      const rect = element.getBoundingClientRect();\n      const fx = event.clientX - rect.left;\n      const fy = event.clientY - rect.top;\n      return fisheye.focus([fx, fy]);\n    };\n\n    return rescale();\n  }\n};\n\nexport default phisheye;\n\n","/**\n * Convert polar to Cartesian: angle in radians, 0 at +x, CCW positive.\n */\nexport default function polarToCartesian(cx, cy, r, angle) {\n  return {\n    x: cx + r * Math.cos(angle),\n    y: cy + r * Math.sin(angle)\n  };\n}\n","import polarToCartesian from \"./polarToCartesian.js\";\n\n/**\n * Describe an SVG arc path between two angles (radians).\n * Always draws the MINOR arc (≤ π). Angles are normalized to [0, 2π).\n */\nfunction normalize(theta) {\n  const t = theta % (2 * Math.PI);\n  return t < 0 ? t + 2 * Math.PI : t;\n}\n\nexport default function describeArc(cx, cy, radius, startAngle, endAngle) {\n  let a0 = normalize(startAngle);\n  let a1 = normalize(endAngle);\n\n  // Choose the minor arc direction\n  let diff = a1 - a0;\n  if (diff <= -Math.PI) diff += 2 * Math.PI;\n  else if (diff > Math.PI) diff -= 2 * Math.PI;\n\n  const largeArcFlag = Math.abs(diff) > Math.PI ? 1 : 0; // for completeness (will be 0 with minor arc)\n  const sweepFlag = diff >= 0 ? 1 : 0;\n\n  const start = polarToCartesian(cx, cy, radius, a0);\n  const end = polarToCartesian(cx, cy, radius, a0 + diff);\n\n  return [\n    \"M\", start.x, start.y,\n    \"A\", radius, radius, 0, largeArcFlag, sweepFlag, end.x, end.y\n  ].join(\" \");\n}\n\n","/**\n * Recursive function for pre-order traversal of tree (returns array)\n */\nexport function preorder(node, list = []) {\n  list.push(node);\n  for (let i = 0; i < (node.children?.length || 0); i++) {\n    list = preorder(node.children[i], list);\n  }\n  return list;\n}\n\n/**\n * Iterative generator traversals (avoid recursion limits on large trees)\n */\nexport function* preorderIter(root) {\n  const stack = [root];\n  while (stack.length) {\n    const n = stack.pop();\n    yield n;\n    if (n.children) for (let i = n.children.length - 1; i >= 0; --i) stack.push(n.children[i]);\n  }\n}\n\nexport function* postorderIter(root) {\n  const stack = [[root, 0]];\n  while (stack.length) {\n    const top = stack[stack.length - 1];\n    const [n, i] = top;\n    if (!n.children || i >= n.children.length) {\n      stack.pop();\n      yield n;\n    } else {\n      top[1] = i + 1;\n      stack.push([n.children[i], 0]);\n    }\n  }\n}\n\n","import { preorder } from \"./preorder.js\"\n\n/**\n * Convert parsed Newick tree from readTree() into data\n * frame.\n * this is akin to a \"phylo\" object in R.\n */\n\nexport default function (tree, sort = true) {\n    var df = [];\n\n    for (const node of preorder(tree)) {\n        if (node.parent === null) {\n            df.push({\n                'parentId': null,\n                'parentLabel': null,\n                'thisId': node.id,\n                'thisLabel': node.label,\n                'children': node.children.map(x => x.id),\n                'branchLength': 0.,\n                'isTip': false,\n                'x': node.x,\n                'y': node.y,\n                'angle': node.angle\n            })\n        }\n        else {\n            df.push({\n                'parentId': node.parent.id,\n                'parentLabel': node.parent.label,\n                'thisId': node.id,\n                'thisLabel': node.label,\n                'children': node.children.map(x => x.id),\n                'branchLength': node.branchLength,\n                'isTip': (node.children.length == 0),\n                'x': node.x,\n                'y': node.y,\n                'angle': node.angle\n            })\n        }\n    }\n\n    if (sort) {\n        df = df.sort(function (a, b) {\n            return a.thisId - b.thisId;\n        })\n    }\n    return (df);\n}\n","import fortify from \"../utils/fortify.js\"\n\n/**\n * Compute per-node polar coordinates for radial layout:\n *  - Tip angles: evenly spaced 0..2π in tip DFS order\n *  - Internal angles: circular mean of child angles\n *  - Radii: cumulative branch length from root\n *  - x,y: cartesian projection\n *\n * Returns the fortified array with added {angle, r, x, y}.\n */\nexport default function radialData(node) {\n  const TAU = Math.PI * 2;\n  const norm = (t) => ((t % TAU) + TAU) % TAU;\n\n  const pd = fortify(node, /*sort*/ true);\n  const byId = new Map(pd.map(d => [d.thisId, d]));\n  const kids = new Map(pd.map(d => [d.thisId, d.children || []]));\n\n  // Find root id\n  let root = null;\n  for (const d of pd) {\n    if (d.parentId == null) { root = d.thisId; break; }\n  }\n\n  // Collect tip ids in DFS left->right order to preserve input ordering\n  const tipIds = [];\n  (function dfs(id) {\n    const c = kids.get(id) || [];\n    if (c.length === 0) {\n      tipIds.push(id);\n      return;\n    }\n    for (const ch of c) dfs(ch);\n  })(root);\n\n  // Assign tip angles evenly spaced 0..2π\n  const N = Math.max(1, tipIds.length);\n  const angle = new Map();\n  tipIds.forEach((id, i) => {\n    angle.set(id, (i / N) * TAU);\n  });\n\n  // Internal node angles: circular mean of child angles (post-order)\n  (function setInternalAngles(id) {\n    const c = kids.get(id) || [];\n    for (const ch of c) setInternalAngles(ch);\n    if (c.length > 0) {\n      let sx = 0, sy = 0;\n      for (const ch of c) {\n        const th = angle.get(ch);\n        sx += Math.cos(th);\n        sy += Math.sin(th);\n      }\n      angle.set(id, norm(Math.atan2(sy, sx)));\n    }\n  })(root);\n\n  // Radii: cumulative branch lengths from root (root r=0)\n  const radius = new Map();\n  radius.set(root, 0);\n  (function setR(id) {\n    const c = kids.get(id) || [];\n    const r0 = radius.get(id) || 0;\n    for (const ch of c) {\n      const child = byId.get(ch);\n      const bl = child?.branchLength ?? 0;\n      radius.set(ch, r0 + bl);\n      setR(ch);\n    }\n  })(root);\n\n  // Enrich pd rows with angle, r, x, y\n  for (const d of pd) {\n    const th = angle.get(d.thisId) ?? 0;\n    const r  = radius.get(d.thisId) ?? 0;\n    d.angle = th;\n    d.r = r;\n    d.x = r * Math.cos(th);\n    d.y = r * Math.sin(th);\n  }\n\n  return pd;\n}\n","/**\n * Build *per-edge* minor arcs for a radial tree.\n * For each non-root node (child), we draw a small arc at the *parent's* radius\n * from the parent's angle to the child's angle (minor arc ≤ π).\n *\n * Input: a \"radialData\" array with fields:\n *   thisId, parentId, angle (radians), r (radius at this node)\n *\n * Output: [{ parentId, childId, radius, start, end }]\n *   where start/end are angles (radians), radius is parent's r\n */\n\nfunction normalize(theta) {\n  const t = theta % (2 * Math.PI);\n  return t < 0 ? t + 2 * Math.PI : t;\n}\n\nfunction minorArc(a, b) {\n  // returns [start, end] representing the minor arc from a -> b\n  a = normalize(a); b = normalize(b);\n  let diff = b - a;\n  if (diff <= -Math.PI) diff += 2 * Math.PI;\n  else if (diff > Math.PI) diff -= 2 * Math.PI;\n  return [a, a + diff]; // draw from a to a+diff\n}\n\nexport default function getArcs(pd) {\n  const byId = new Map(pd.map(d => [d.thisId, d]));\n  // Find root thisId\n  const root = pd.find(d => d.parentId == null)?.thisId;\n\n  const arcs = [];\n  for (const d of pd) {\n    if (d.thisId === root) continue;\n    const parent = byId.get(d.parentId);\n    if (!parent) continue;\n\n    // minor arc from parent.angle -> child.angle at radius parent.r\n    const [start, end] = minorArc(parent.angle, d.angle);\n\n    if (!isFinite(parent.r) || parent.r === 0 || start === end) continue;\n    arcs.push({\n      parentId: parent.thisId,\n      childId: d.thisId,\n      radius: parent.r,\n      start,\n      end\n    });\n  }\n  return arcs;\n}\n\n","import radialData from \"./radialData.js\"\nimport getRadii from \"./getRadii.js\"\nimport getArcs from \"./getArcs.js\"\n\n/**\n * Simple wrapper for radial layout:\n *  - data: per-node { angle, r, x, y, ... }\n *  - radii: per-edge radial spokes (parent.r → child.r)\n *  - arcs: per-internal-node arcs spanning its children at parent radius\n */\nexport default function radialLayout(node) {\n  const data = {};\n  data.data = radialData(node);\n  data.radii = getRadii(node);\n  data.arcs = getArcs(data.data);\n  return data;\n}\n\n","import radialData from \"./radialData.js\";\n\n/**\n * Per-edge radial segments (for highlighting and drawing).\n * For each non-root node, draw a radial line from the parent radius to the child radius\n * at the CHILD'S angle.\n *\n * Output: [{ parentId, childId, x0, y0, x1, y1, isTip }]\n */\nexport default function getRadii(node) {\n  const data = radialData(node);\n  const byId = new Map(data.map(d => [d.thisId, d]));\n  const root = data.find(d => d.parentId == null)?.thisId;\n\n  const segments = [];\n  for (const d of data) {\n    if (d.thisId === root) continue;\n    const parent = byId.get(d.parentId);\n    if (!parent) continue;\n\n    const theta = d.angle;\n    const r0 = parent.r;\n    const r1 = d.r;\n\n    segments.push({\n      parentId: parent.thisId,\n      childId: d.thisId,\n      x0: r0 * Math.cos(theta),\n      y0: r0 * Math.sin(theta),\n      x1: r1 * Math.cos(theta),\n      y1: r1 * Math.sin(theta),\n      isTip: !!d.isTip\n    });\n  }\n  return segments;\n}\n\n","import mean from \"../utils/mean.js\"\nimport fortify from \"../utils/fortify.js\"\n\n/**\n * Rectangle layout: compute per-node x0,x1 and y0=y1\n * - Tip y is assigned by input order (preserves ladderize/order)\n * - Internal node y is mean of child y's\n * - x1 accumulates branch lengths from root\n */\n\nexport default function getHorizontal(node) {\n  const pd = fortify(node);\n\n  // Fast lookup from id -> pd index\n  const idIndex = new Map(pd.map((d, i) => [d.thisId, i]));\n\n  // 1) Leaf order from the INPUT TREE (respects your child order / ladderize)\n  const leafIds = [];\n  (function dfs(n) {\n    if (!n.children || n.children.length === 0) { leafIds.push(n.id); return; }\n    n.children.forEach(dfs);\n  })(node);\n\n  // Map each leaf id to a vertical slot (1..N)\n  const tipSlot = new Map(leafIds.map((id, i) => [id, i + 1]));\n\n  // 2) Set Y for tips directly from that order; internal node Y via children mean\n  (function setY(n) {\n    const i = idIndex.get(n.id);\n    if (!n.children || n.children.length === 0) {\n      const y = tipSlot.get(n.id);\n      pd[i].y0 = y; pd[i].y1 = y;\n      return y;\n    }\n    const ys = n.children.map(setY);\n    const y = mean(ys);\n    pd[i].y0 = y; pd[i].y1 = y;\n    return y;\n  })(node);\n\n  // 3) Set X by accumulating branch lengths down the tree\n  (function setX(n, xParent) {\n    const i = idIndex.get(n.id);\n    const bl = pd[i].branchLength ?? 0;\n    const x0 = xParent ?? 0;\n    const x1 = x0 + bl;\n    pd[i].x0 = x0; pd[i].x1 = x1;\n    if (n.children && n.children.length) n.children.forEach(c => setX(c, x1));\n  })(node, 0);\n\n  // Clean up: remove fields not needed downstream without triggering no-unused-vars\n  return pd.map((row) => {\n    const { y: _y, x: _x, angle: _angle, ...item } = row;\n    return item;\n  });\n}\n\n","/**\n * Iterable mean\n * Poached from https://github.com/d3/d3-array/blob/master/src/mean.js\n * (Other array means buggered up the tree)\n */\n\nexport default function (values, valueof) {\n    let count = 0;\n    let sum = 0;\n    if (valueof === undefined) {\n        for (let value of values) {\n            if (value != null && (value = +value) >= value) {\n                ++count, sum += value;\n            }\n        }\n    } else {\n        let index = -1;\n        for (let value of values) {\n            if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n                ++count, sum += value;\n            }\n        }\n    }\n    if (count) return sum / count;\n}\n","import getHorizontal from \"./getHorizontal.js\"\nimport getVertical from \"./getVertical.js\"\nimport getChildVerticals from \"./getChildVerticals.js\"\n\n/**\n * Rectangle layout wrapper.\n * Returns:\n *  - data: per-node rows (x0,x1,y0=y1,...)\n *  - vertical_lines: single spanning vertical per parent (baseline draw)\n *  - child_vertical_lines: one vertical per edge (for highlighting)\n *  - horizontal_lines: per-edge child horizontals (x0->x1 at y), with labels & tip flags\n */\nexport default function rectangleLayout(node) {\n  const data = getHorizontal(node);              // per-node\n  const vertical_lines = getVertical(node);      // parent spans\n  const child_vertical_lines = getChildVerticals(node); // per-edge verticals\n\n  // IMPORTANT: include y0 & y1, and carry isTip/labels for the renderer\n  const byId = new Map(data.map(d => [d.thisId, d]));\n  const horizontal_lines = data\n    .filter(d => d.parentId != null)\n    .map(d => ({\n      parentId: d.parentId,\n      childId: d.thisId,\n      thisId: d.thisId,\n      thisLabel: d.thisLabel,\n      isTip: d.isTip,\n      x0: d.x0,\n      x1: d.x1,\n      y0: d.y0,\n      y1: d.y0\n    }));\n\n  return { data, vertical_lines, child_vertical_lines, horizontal_lines };\n}\n\n","import getHorizontal from \"./getHorizontal.js\"\n\nexport default function getVertical(node) {\n  const data = getHorizontal(node);\n\n  // Group rows by parentId (children that share a parent)\n  const byParent = new Map();\n  for (const row of data) {\n    if (row.parentId == null) continue;\n    const a = byParent.get(row.parentId);\n    if (a) a.push(row); else byParent.set(row.parentId, [row]);\n  }\n\n  const verticals = [];\n  for (const [parentId, kids] of byParent.entries()) {\n    if (!kids.length) continue;\n    // Works for binary and multifurcations:\n    const yvals = kids.map(d => d.y0);\n    const y0 = Math.min(...yvals);\n    const y1 = Math.max(...yvals);\n    // All children share the same junction x (their x0)\n    const x = kids[0].x0;\n\n    verticals.push({\n      parentId,\n      x0: x,\n      x1: x,\n      y0,\n      y1,\n      heights: y1 - y0\n    });\n  }\n\n  return verticals;\n}\n\n","import getHorizontal from \"./getHorizontal.js\";\n\n/**\n * Build per-child vertical segments for a rectangular tree:\n * For each non-root node (child), draw a vertical from (parent.x, child.y) to (parent.x, parent.y).\n * This yields exactly one vertical per edge (child->parent), making highlighting trivial.\n *\n * Returns an array of:\n *   {\n *     parentId: number,\n *     childId: number,\n *     x: number,         // x of the parent junction\n *     y0: number,        // min(child.y, parent.y)\n *     y1: number,        // max(child.y, parent.y)\n *   }\n */\nexport default function getChildVerticals(node) {\n  const data = getHorizontal(node); // has parentId, thisId, x0,x1,y0=y1\n\n  // Build a quick index to access parent's y by id\n  const byId = new Map(data.map(d => [d.thisId, d]));\n\n  const childVerticals = [];\n\n  for (const d of data) {\n    if (d.parentId == null) continue;\n    const parent = byId.get(d.parentId);\n    if (!parent) continue;\n\n    const x = d.x0;            // child’s vertical sits at parent.x == child.x0\n    const yc = d.y0;           // child y\n    const yp = parent.y0;      // parent y\n    const y0 = Math.min(yc, yp);\n    const y1 = Math.max(yc, yp);\n\n    childVerticals.push({\n      parentId: d.parentId,\n      childId: d.thisId,\n      x,\n      y0,\n      y1\n    });\n  }\n\n  return childVerticals;\n}\n\n","import numTips from \"../utils/numTips.js\"\n\n/**\n * Equal-angle layout for unrooted trees.\n * - Precomputes ntips in O(n) to avoid repeated subtree counts\n * - Uses angles in \"π units\" (0..2) to match existing API\n * - Populates x,y positions from branchLength and angle\n */\n\nfunction annotateTipCounts(root) {\n  (function post(n) {\n    if (!n.children || n.children.length === 0) {\n      n.ntips = 1; return 1;\n    }\n    let sum = 0;\n    for (const c of n.children) sum += post(c);\n    n.ntips = sum;\n    return sum;\n  })(root);\n  return root;\n}\n\nfunction equalAngleLayout(node) {\n  if (node.parent === null) {\n    annotateTipCounts(node);\n    node.start = 0.;     // guarantees no arcs overlap 0\n    node.end = 2.;       // *π\n    node.angle = 0.;     // irrelevant at root\n    node.ntips = numTips(node); // safe (already computed), left for compatibility\n    node.x = 0;\n    node.y = 0;\n  }\n\n  let lastStart = node.start;\n\n  for (let i = 0; i < node.children.length; i++) {\n    const child = node.children[i];\n    const arc = (node.end - node.start) * (child.ntips / node.ntips);\n\n    child.start = lastStart;\n    child.end = lastStart + arc;\n\n    // bisect the arc in π-units\n    child.angle = child.start + (child.end - child.start) / 2.;\n    lastStart = child.end;\n\n    // map to coordinates (convert π-units to radians by multiplying by Math.PI)\n    const theta = child.angle * Math.PI;\n    const bl = (child.branchLength ?? 0);\n    child.x = node.x + bl * Math.sin(theta);\n    child.y = node.y + bl * Math.cos(theta);\n\n    equalAngleLayout(child);\n  }\n\n  return node;\n}\n\nexport default equalAngleLayout\n\n","/**\n * Recursive function for breadth-first search of a tree\n * the root node is visited first.\n */\n\nfunction levelorder(root) {\n  const queue = [root], result = [];\n  while (queue.length) {\n    const curnode = queue.shift();         // <- FIFO\n    result.push(curnode);\n    for (const child of curnode.children) queue.push(child);\n  }\n  return result;\n}\n\n\n/**\n * Count the number of tips that descend from this node\n */\n\nexport default function(thisnode) {\n  var result = 0;\n  for (const node of levelorder(thisnode)) {\n    if (node.children.length == 0) result++;\n  }\n  return (result);\n}\n","import edges from \"../utils/edges.js\";\nimport fortify from \"../utils/fortify.js\";\nimport equalAngleLayout from \"./equalAngleLayout.js\";\n\n/**\n * Simple wrapper function for equalAngleLayout()\n */\n\nexport default function (node) {\n  var data = {};\n  // use the Felsenstein equal angle layout algorithm\n  var eq = fortify(equalAngleLayout(node));\n  data.data = eq;\n  // make the edges dataset\n  data.edges = edges(eq);\n\n  return data;\n}\n","/**\n * Convert parsed Newick tree from fortify() into data frame of edges\n * this is akin to a \"phylo\" object in R, where thisID and parentId\n * are the $edge slot. I think.\n */\n\nexport default function edges(df, rectangular = false) {\n  const rows = [...df].sort((a, b) => a.thisId - b.thisId);\n  const byId = new Map(rows.map((r) => [r.thisId, r]));\n  const result = [];\n\n  for (const row of rows) {\n    if (row.parentId == null) continue;\n    const parent = byId.get(row.parentId);\n    if (!parent) continue;\n\n    if (rectangular) {\n      result.push({ x1: row.x, y1: row.y, id1: row.thisId, x2: parent.x, y2: row.y, id2: undefined });\n      result.push({ x1: parent.x, y1: row.y, id1: undefined, x2: parent.x, y2: parent.y, id2: row.parentId });\n    } else {\n      result.push({ x1: row.x, y1: row.y, id1: row.thisId, x2: parent.x, y2: parent.y, id2: row.parentId });\n    }\n  }\n  return result;\n}\n\n","export function makeIndexById(rows, key = \"thisId\") {\n  return new Map(rows.map(d => [d[key], d]));\n}\nexport default function parentFisheye(d, data) {\n  const byId = makeIndexById(data);\n  const parent = byId.get(d.parentId);\n  return parent ? { px: parent.fisheye.x, py: parent.fisheye.y } : null;\n}\n\n","/**\n * Parse a Newick tree string into a doubly-linked list of JS Objects.\n * Assigns labels, branch lengths, and node IDs (tips before internals if input emits them that way).\n *\n * Notes / limitations:\n * - Quoted labels and NHX annotations are not fully supported.\n * - Branch lengths in scientific notation are supported (parseFloat).\n */\n\nexport default function readTree(text) {\n  // Remove all whitespace (space, tabs, newlines)\n  text = String(text).replace(/\\s+/g, '');\n\n  const tokens = text.split(/(;|\\(|\\)|,)/);\n  const root = { parent: null, children: [] };\n  let curnode = root;\n  let nodeId = 0;\n\n  for (const token of tokens) {\n    if (!token || token === ';') continue;\n\n    if (token === '(') {\n      const child = { parent: curnode, children: [] };\n      curnode.children.push(child);\n      curnode = child; // descend\n    } else if (token === ',') {\n      // back to parent, then create sibling\n      curnode = curnode.parent;\n      const child = { parent: curnode, children: [] };\n      curnode.children.push(child);\n      curnode = child;\n    } else if (token === ')') {\n      // ascend one level\n      curnode = curnode.parent;\n      if (curnode === null) break;\n    } else {\n      // label/branch-length chunk (e.g., \"A:0.01\" or \"A\")\n      const nodeinfo = token.split(':');\n      if (nodeinfo.length === 1) {\n        if (token.startsWith(':')) {\n          curnode.label = '';\n          curnode.branchLength = parseFloat(nodeinfo[0]);\n        } else {\n          curnode.label = nodeinfo[0];\n          curnode.branchLength = null;\n        }\n      } else if (nodeinfo.length === 2) {\n        curnode.label = nodeinfo[0];\n        curnode.branchLength = parseFloat(nodeinfo[1]);\n      } else {\n        console.warn(token, \"Unhandled token with multiple ':' characters\");\n        curnode.label = nodeinfo[0] || '';\n        curnode.branchLength = parseFloat(nodeinfo[nodeinfo.length - 1]);\n      }\n      curnode.id = nodeId++; // assign then increment\n    }\n  }\n\n  // Ensure root has an id if not assigned during parsing\n  if (root.id == null) root.id = nodeId;\n\n  return root;\n}\n\n","/** \n* Subset a tree given a node - i.e. the node of interests and all the descendents\n*/\n\nexport default function (tree, node) {\n    // Thanks Richard Challis!\n    let fullTree = {};\n    tree.data.forEach(obj => {\n        fullTree[obj.thisId] = { ...obj };\n    });\n\n    let subTree = {};\n    const getDescendants = function (rootNodeId) {\n        if (fullTree[rootNodeId]) {\n            subTree[rootNodeId] = fullTree[rootNodeId];\n            if (fullTree[rootNodeId].children) {\n                fullTree[rootNodeId].children.forEach(childNodeId => {\n                    getDescendants(childNodeId);\n                });\n            }\n        }\n    };\n    // call the recursive function\n    getDescendants(node);\n\n    // in each of the functions, data contains the children key\n    const data = [[\"data\", Object.values(subTree)]];\n\n    const nodes = data[0][1].map(d => d.thisId);\n\n    var res = [];\n    // in all keys except data, push to new array\n    for (const node in tree) {\n        if (node === \"data\") continue;\n        res.push([node, tree[node]]);\n    }\n\n    var filtered = res.map(d => [\n        d[0],\n        d[1].filter(d => nodes.includes(d.thisId))\n    ]);\n\n    return Object.fromEntries(data.concat(filtered));\n}\n"],"names":["phisheye","circular","radius","distortion","focus","scales","k0","k1","radius2","zClamp","rescale","e","Math","exp","fisheye","d","xscale","yscale","Error","ensureScales","x0","x","y0","y","dx","dy","dd2","z","dd","sqrt","k","min","_","arguments","length","max","slice","Array","isArray","setScales","clampZ","focusFromEvent","event","element","rect","getBoundingClientRect","fx","clientX","left","fy","clientY","top","polarToCartesian","cx","cy","r","angle","cos","sin","normalize","theta","t","PI","describeArc","startAngle","endAngle","a0","diff","largeArcFlag","abs","sweepFlag","start","end","join","preorder","node","list","push","i","children","fortify","tree","sort","df","parent","parentId","parentLabel","thisId","id","thisLabel","label","map","branchLength","isTip","a","b","radialData","TAU","pd","byId","Map","kids","root","tipIds","dfs","c","get","ch","N","forEach","set","setInternalAngles","sx","sy","th","atan2","setR","r0","child","bl","minorArc","radialLayout","data","radii","find","segments","r1","childId","x1","y1","getRadii","arcs","isFinite","getArcs","getHorizontal","idIndex","leafIds","n","tipSlot","setY","values","count","sum","value","mean","setX","xParent","row","_y","_x","_angle","item","rectangleLayout","vertical_lines","byParent","verticals","entries","yvals","heights","getVertical","child_vertical_lines","childVerticals","yc","yp","getChildVerticals","horizontal_lines","filter","equalAngleLayout","post","ntips","thisnode","result","queue","curnode","shift","levelorder","numTips","lastStart","arc","unrooted","eq","edges","rectangular","rows","id1","x2","y2","id2","undefined","parentFisheye","key","makeIndexById","px","py","readTree","text","tokens","String","replace","split","nodeId","token","nodeinfo","startsWith","parseFloat","console","warn","subTree","fullTree","obj","getDescendants","rootNodeId","childNodeId","Object","nodes","res","filtered","includes","fromEntries","concat"],"mappings":"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"}